<?php
/**
 * RolesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Kinde\KindeSDK\ApiException;
use Kinde\KindeSDK\Configuration;
use Kinde\KindeSDK\FormDataProcessor;
use Kinde\KindeSDK\HeaderSelector;
use Kinde\KindeSDK\ObjectSerializer;

/**
 * RolesApi Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addRoleScope' => [
            'application/json',
        ],
        'createRole' => [
            'application/json',
        ],
        'deleteRole' => [
            'application/json',
        ],
        'deleteRoleScope' => [
            'application/json',
        ],
        'getRole' => [
            'application/json',
        ],
        'getRolePermissions' => [
            'application/json',
        ],
        'getRoleScopes' => [
            'application/json',
        ],
        'getRoles' => [
            'application/json',
        ],
        'removeRolePermission' => [
            'application/json',
        ],
        'updateRolePermissions' => [
            'application/json',
        ],
        'updateRoles' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addRoleScope
     *
     * Add role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  \Kinde\KindeSDK\Model\AddRoleScopeRequest $add_role_scope_request Add scope to role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRoleScope'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\AddRoleScopeResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function addRoleScope($role_id, $add_role_scope_request, string $contentType = self::contentTypes['addRoleScope'][0])
    {
        list($response) = $this->addRoleScopeWithHttpInfo($role_id, $add_role_scope_request, $contentType);
        return $response;
    }

    /**
     * Operation addRoleScopeWithHttpInfo
     *
     * Add role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  \Kinde\KindeSDK\Model\AddRoleScopeRequest $add_role_scope_request Add scope to role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRoleScope'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\AddRoleScopeResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRoleScopeWithHttpInfo($role_id, $add_role_scope_request, string $contentType = self::contentTypes['addRoleScope'][0])
    {
        $request = $this->addRoleScopeRequest($role_id, $add_role_scope_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\AddRoleScopeResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\AddRoleScopeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\AddRoleScopeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addRoleScopeAsync
     *
     * Add role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  \Kinde\KindeSDK\Model\AddRoleScopeRequest $add_role_scope_request Add scope to role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRoleScope'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRoleScopeAsync($role_id, $add_role_scope_request, string $contentType = self::contentTypes['addRoleScope'][0])
    {
        return $this->addRoleScopeAsyncWithHttpInfo($role_id, $add_role_scope_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRoleScopeAsyncWithHttpInfo
     *
     * Add role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  \Kinde\KindeSDK\Model\AddRoleScopeRequest $add_role_scope_request Add scope to role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRoleScope'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRoleScopeAsyncWithHttpInfo($role_id, $add_role_scope_request, string $contentType = self::contentTypes['addRoleScope'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\AddRoleScopeResponse';
        $request = $this->addRoleScopeRequest($role_id, $add_role_scope_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRoleScope'
     *
     * @param  string $role_id The role id. (required)
     * @param  \Kinde\KindeSDK\Model\AddRoleScopeRequest $add_role_scope_request Add scope to role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRoleScope'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRoleScopeRequest($role_id, $add_role_scope_request, string $contentType = self::contentTypes['addRoleScope'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling addRoleScope'
            );
        }

        // verify the required parameter 'add_role_scope_request' is set
        if ($add_role_scope_request === null || (is_array($add_role_scope_request) && count($add_role_scope_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_role_scope_request when calling addRoleScope'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}/scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_role_scope_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_role_scope_request));
            } else {
                $httpBody = $add_role_scope_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRole
     *
     * Create role
     *
     * @param  \Kinde\KindeSDK\Model\CreateRoleRequest|null $create_role_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRole'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\CreateRolesResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function createRole($create_role_request = null, string $contentType = self::contentTypes['createRole'][0])
    {
        list($response) = $this->createRoleWithHttpInfo($create_role_request, $contentType);
        return $response;
    }

    /**
     * Operation createRoleWithHttpInfo
     *
     * Create role
     *
     * @param  \Kinde\KindeSDK\Model\CreateRoleRequest|null $create_role_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRole'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\CreateRolesResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRoleWithHttpInfo($create_role_request = null, string $contentType = self::contentTypes['createRole'][0])
    {
        $request = $this->createRoleRequest($create_role_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\CreateRolesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\CreateRolesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\CreateRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createRoleAsync
     *
     * Create role
     *
     * @param  \Kinde\KindeSDK\Model\CreateRoleRequest|null $create_role_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRoleAsync($create_role_request = null, string $contentType = self::contentTypes['createRole'][0])
    {
        return $this->createRoleAsyncWithHttpInfo($create_role_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRoleAsyncWithHttpInfo
     *
     * Create role
     *
     * @param  \Kinde\KindeSDK\Model\CreateRoleRequest|null $create_role_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRoleAsyncWithHttpInfo($create_role_request = null, string $contentType = self::contentTypes['createRole'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\CreateRolesResponse';
        $request = $this->createRoleRequest($create_role_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRole'
     *
     * @param  \Kinde\KindeSDK\Model\CreateRoleRequest|null $create_role_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRoleRequest($create_role_request = null, string $contentType = self::contentTypes['createRole'][0])
    {



        $resourcePath = '/api/v1/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_role_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_role_request));
            } else {
                $httpBody = $create_role_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRole
     *
     * Delete role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRole'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function deleteRole($role_id, string $contentType = self::contentTypes['deleteRole'][0])
    {
        list($response) = $this->deleteRoleWithHttpInfo($role_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteRoleWithHttpInfo
     *
     * Delete role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRole'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRoleWithHttpInfo($role_id, string $contentType = self::contentTypes['deleteRole'][0])
    {
        $request = $this->deleteRoleRequest($role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\SuccessResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRoleAsync
     *
     * Delete role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRoleAsync($role_id, string $contentType = self::contentTypes['deleteRole'][0])
    {
        return $this->deleteRoleAsyncWithHttpInfo($role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRoleAsyncWithHttpInfo
     *
     * Delete role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRoleAsyncWithHttpInfo($role_id, string $contentType = self::contentTypes['deleteRole'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
        $request = $this->deleteRoleRequest($role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRole'
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRoleRequest($role_id, string $contentType = self::contentTypes['deleteRole'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling deleteRole'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRoleScope
     *
     * Delete role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  string $scope_id The scope id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleScope'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\DeleteRoleScopeResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function deleteRoleScope($role_id, $scope_id, string $contentType = self::contentTypes['deleteRoleScope'][0])
    {
        list($response) = $this->deleteRoleScopeWithHttpInfo($role_id, $scope_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteRoleScopeWithHttpInfo
     *
     * Delete role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  string $scope_id The scope id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleScope'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\DeleteRoleScopeResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRoleScopeWithHttpInfo($role_id, $scope_id, string $contentType = self::contentTypes['deleteRoleScope'][0])
    {
        $request = $this->deleteRoleScopeRequest($role_id, $scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\DeleteRoleScopeResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\DeleteRoleScopeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\DeleteRoleScopeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRoleScopeAsync
     *
     * Delete role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  string $scope_id The scope id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleScope'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRoleScopeAsync($role_id, $scope_id, string $contentType = self::contentTypes['deleteRoleScope'][0])
    {
        return $this->deleteRoleScopeAsyncWithHttpInfo($role_id, $scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRoleScopeAsyncWithHttpInfo
     *
     * Delete role scope
     *
     * @param  string $role_id The role id. (required)
     * @param  string $scope_id The scope id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleScope'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRoleScopeAsyncWithHttpInfo($role_id, $scope_id, string $contentType = self::contentTypes['deleteRoleScope'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\DeleteRoleScopeResponse';
        $request = $this->deleteRoleScopeRequest($role_id, $scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRoleScope'
     *
     * @param  string $role_id The role id. (required)
     * @param  string $scope_id The scope id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleScope'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRoleScopeRequest($role_id, $scope_id, string $contentType = self::contentTypes['deleteRoleScope'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling deleteRoleScope'
            );
        }

        // verify the required parameter 'scope_id' is set
        if ($scope_id === null || (is_array($scope_id) && count($scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope_id when calling deleteRoleScope'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}/scopes/{scope_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }
        // path params
        if ($scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'scope_id' . '}',
                ObjectSerializer::toPathValue($scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRole
     *
     * Get role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRole'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\GetRoleResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function getRole($role_id, string $contentType = self::contentTypes['getRole'][0])
    {
        list($response) = $this->getRoleWithHttpInfo($role_id, $contentType);
        return $response;
    }

    /**
     * Operation getRoleWithHttpInfo
     *
     * Get role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRole'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\GetRoleResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoleWithHttpInfo($role_id, string $contentType = self::contentTypes['getRole'][0])
    {
        $request = $this->getRoleRequest($role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\GetRoleResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\GetRoleResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\GetRoleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRoleAsync
     *
     * Get role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoleAsync($role_id, string $contentType = self::contentTypes['getRole'][0])
    {
        return $this->getRoleAsyncWithHttpInfo($role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoleAsyncWithHttpInfo
     *
     * Get role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoleAsyncWithHttpInfo($role_id, string $contentType = self::contentTypes['getRole'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\GetRoleResponse';
        $request = $this->getRoleRequest($role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRole'
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRoleRequest($role_id, string $contentType = self::contentTypes['getRole'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling getRole'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRolePermissions
     *
     * Get role permissions
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRolePermissions'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\RolePermissionsResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function getRolePermissions($role_id, $sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRolePermissions'][0])
    {
        list($response) = $this->getRolePermissionsWithHttpInfo($role_id, $sort, $page_size, $next_token, $contentType);
        return $response;
    }

    /**
     * Operation getRolePermissionsWithHttpInfo
     *
     * Get role permissions
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRolePermissions'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\RolePermissionsResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRolePermissionsWithHttpInfo($role_id, $sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRolePermissions'][0])
    {
        $request = $this->getRolePermissionsRequest($role_id, $sort, $page_size, $next_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\RolePermissionsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\RolePermissionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\RolePermissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRolePermissionsAsync
     *
     * Get role permissions
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRolePermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRolePermissionsAsync($role_id, $sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRolePermissions'][0])
    {
        return $this->getRolePermissionsAsyncWithHttpInfo($role_id, $sort, $page_size, $next_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRolePermissionsAsyncWithHttpInfo
     *
     * Get role permissions
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRolePermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRolePermissionsAsyncWithHttpInfo($role_id, $sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRolePermissions'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\RolePermissionsResponse';
        $request = $this->getRolePermissionsRequest($role_id, $sort, $page_size, $next_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRolePermissions'
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRolePermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRolePermissionsRequest($role_id, $sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRolePermissions'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling getRolePermissions'
            );
        }





        $resourcePath = '/api/v1/roles/{role_id}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'next_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoleScopes
     *
     * Get role scopes
     *
     * @param  string $role_id The role id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleScopes'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\RoleScopesResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function getRoleScopes($role_id, string $contentType = self::contentTypes['getRoleScopes'][0])
    {
        list($response) = $this->getRoleScopesWithHttpInfo($role_id, $contentType);
        return $response;
    }

    /**
     * Operation getRoleScopesWithHttpInfo
     *
     * Get role scopes
     *
     * @param  string $role_id The role id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleScopes'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\RoleScopesResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoleScopesWithHttpInfo($role_id, string $contentType = self::contentTypes['getRoleScopes'][0])
    {
        $request = $this->getRoleScopesRequest($role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\RoleScopesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\RoleScopesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\RoleScopesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRoleScopesAsync
     *
     * Get role scopes
     *
     * @param  string $role_id The role id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleScopes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoleScopesAsync($role_id, string $contentType = self::contentTypes['getRoleScopes'][0])
    {
        return $this->getRoleScopesAsyncWithHttpInfo($role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoleScopesAsyncWithHttpInfo
     *
     * Get role scopes
     *
     * @param  string $role_id The role id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleScopes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoleScopesAsyncWithHttpInfo($role_id, string $contentType = self::contentTypes['getRoleScopes'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\RoleScopesResponse';
        $request = $this->getRoleScopesRequest($role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoleScopes'
     *
     * @param  string $role_id The role id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleScopes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRoleScopesRequest($role_id, string $contentType = self::contentTypes['getRoleScopes'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling getRoleScopes'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}/scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoles
     *
     * List roles
     *
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoles'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\GetRolesResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function getRoles($sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRoles'][0])
    {
        list($response) = $this->getRolesWithHttpInfo($sort, $page_size, $next_token, $contentType);
        return $response;
    }

    /**
     * Operation getRolesWithHttpInfo
     *
     * List roles
     *
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoles'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\GetRolesResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRolesWithHttpInfo($sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRoles'][0])
    {
        $request = $this->getRolesRequest($sort, $page_size, $next_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\GetRolesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\GetRolesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\GetRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRolesAsync
     *
     * List roles
     *
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRolesAsync($sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRoles'][0])
    {
        return $this->getRolesAsyncWithHttpInfo($sort, $page_size, $next_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRolesAsyncWithHttpInfo
     *
     * List roles
     *
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRolesAsyncWithHttpInfo($sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRoles'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\GetRolesResponse';
        $request = $this->getRolesRequest($sort, $page_size, $next_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoles'
     *
     * @param  string|null $sort Field and order to sort the result by. (optional)
     * @param  int|null $page_size Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param  string|null $next_token A string to get the next page of results if there are more results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRolesRequest($sort = null, $page_size = null, $next_token = null, string $contentType = self::contentTypes['getRoles'][0])
    {





        $resourcePath = '/api/v1/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'next_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeRolePermission
     *
     * Remove role permission
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string $permission_id The permission&#39;s public id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRolePermission'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function removeRolePermission($role_id, $permission_id, string $contentType = self::contentTypes['removeRolePermission'][0])
    {
        list($response) = $this->removeRolePermissionWithHttpInfo($role_id, $permission_id, $contentType);
        return $response;
    }

    /**
     * Operation removeRolePermissionWithHttpInfo
     *
     * Remove role permission
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string $permission_id The permission&#39;s public id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRolePermission'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRolePermissionWithHttpInfo($role_id, $permission_id, string $contentType = self::contentTypes['removeRolePermission'][0])
    {
        $request = $this->removeRolePermissionRequest($role_id, $permission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\SuccessResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeRolePermissionAsync
     *
     * Remove role permission
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string $permission_id The permission&#39;s public id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRolePermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRolePermissionAsync($role_id, $permission_id, string $contentType = self::contentTypes['removeRolePermission'][0])
    {
        return $this->removeRolePermissionAsyncWithHttpInfo($role_id, $permission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeRolePermissionAsyncWithHttpInfo
     *
     * Remove role permission
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string $permission_id The permission&#39;s public id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRolePermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeRolePermissionAsyncWithHttpInfo($role_id, $permission_id, string $contentType = self::contentTypes['removeRolePermission'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
        $request = $this->removeRolePermissionRequest($role_id, $permission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeRolePermission'
     *
     * @param  string $role_id The role&#39;s public id. (required)
     * @param  string $permission_id The permission&#39;s public id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeRolePermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeRolePermissionRequest($role_id, $permission_id, string $contentType = self::contentTypes['removeRolePermission'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling removeRolePermission'
            );
        }

        // verify the required parameter 'permission_id' is set
        if ($permission_id === null || (is_array($permission_id) && count($permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permission_id when calling removeRolePermission'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}/permissions/{permission_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }
        // path params
        if ($permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'permission_id' . '}',
                ObjectSerializer::toPathValue($permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRolePermissions
     *
     * Update role permissions
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolePermissionsRequest $update_role_permissions_request update_role_permissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRolePermissions'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\UpdateRolePermissionsResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function updateRolePermissions($role_id, $update_role_permissions_request, string $contentType = self::contentTypes['updateRolePermissions'][0])
    {
        list($response) = $this->updateRolePermissionsWithHttpInfo($role_id, $update_role_permissions_request, $contentType);
        return $response;
    }

    /**
     * Operation updateRolePermissionsWithHttpInfo
     *
     * Update role permissions
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolePermissionsRequest $update_role_permissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRolePermissions'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\UpdateRolePermissionsResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRolePermissionsWithHttpInfo($role_id, $update_role_permissions_request, string $contentType = self::contentTypes['updateRolePermissions'][0])
    {
        $request = $this->updateRolePermissionsRequest($role_id, $update_role_permissions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\UpdateRolePermissionsResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\UpdateRolePermissionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\UpdateRolePermissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateRolePermissionsAsync
     *
     * Update role permissions
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolePermissionsRequest $update_role_permissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRolePermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRolePermissionsAsync($role_id, $update_role_permissions_request, string $contentType = self::contentTypes['updateRolePermissions'][0])
    {
        return $this->updateRolePermissionsAsyncWithHttpInfo($role_id, $update_role_permissions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRolePermissionsAsyncWithHttpInfo
     *
     * Update role permissions
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolePermissionsRequest $update_role_permissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRolePermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRolePermissionsAsyncWithHttpInfo($role_id, $update_role_permissions_request, string $contentType = self::contentTypes['updateRolePermissions'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\UpdateRolePermissionsResponse';
        $request = $this->updateRolePermissionsRequest($role_id, $update_role_permissions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRolePermissions'
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolePermissionsRequest $update_role_permissions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRolePermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRolePermissionsRequest($role_id, $update_role_permissions_request, string $contentType = self::contentTypes['updateRolePermissions'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling updateRolePermissions'
            );
        }

        // verify the required parameter 'update_role_permissions_request' is set
        if ($update_role_permissions_request === null || (is_array($update_role_permissions_request) && count($update_role_permissions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_role_permissions_request when calling updateRolePermissions'
            );
        }


        $resourcePath = '/api/v1/roles/{role_id}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_role_permissions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_role_permissions_request));
            } else {
                $httpBody = $update_role_permissions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRoles
     *
     * Update role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolesRequest|null $update_roles_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoles'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function updateRoles($role_id, $update_roles_request = null, string $contentType = self::contentTypes['updateRoles'][0])
    {
        list($response) = $this->updateRolesWithHttpInfo($role_id, $update_roles_request, $contentType);
        return $response;
    }

    /**
     * Operation updateRolesWithHttpInfo
     *
     * Update role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolesRequest|null $update_roles_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoles'] to see the possible values for this operation
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRolesWithHttpInfo($role_id, $update_roles_request = null, string $contentType = self::contentTypes['updateRoles'][0])
    {
        $request = $this->updateRolesRequest($role_id, $update_roles_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kinde\KindeSDK\Model\SuccessResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateRolesAsync
     *
     * Update role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolesRequest|null $update_roles_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRolesAsync($role_id, $update_roles_request = null, string $contentType = self::contentTypes['updateRoles'][0])
    {
        return $this->updateRolesAsyncWithHttpInfo($role_id, $update_roles_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRolesAsyncWithHttpInfo
     *
     * Update role
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolesRequest|null $update_roles_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRolesAsyncWithHttpInfo($role_id, $update_roles_request = null, string $contentType = self::contentTypes['updateRoles'][0])
    {
        $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
        $request = $this->updateRolesRequest($role_id, $update_roles_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRoles'
     *
     * @param  string $role_id The identifier for the role. (required)
     * @param  \Kinde\KindeSDK\Model\UpdateRolesRequest|null $update_roles_request Role details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRolesRequest($role_id, $update_roles_request = null, string $contentType = self::contentTypes['updateRoles'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling updateRoles'
            );
        }



        $resourcePath = '/api/v1/roles/{role_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role_id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_roles_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_roles_request));
            } else {
                $httpBody = $update_roles_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
