<?php
/**
 * GetEntitlementsResponseDataEntitlementsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Account API
 *
 * Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model\Frontend;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * GetEntitlementsResponseDataEntitlementsInner Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEntitlementsResponseDataEntitlementsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_entitlements_response_data_entitlements_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'fixed_charge' => 'int',
        'price_name' => 'string',
        'unit_amount' => 'int',
        'feature_key' => 'string',
        'feature_name' => 'string',
        'entitlement_limit_max' => 'int',
        'entitlement_limit_min' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'fixed_charge' => null,
        'price_name' => null,
        'unit_amount' => null,
        'feature_key' => null,
        'feature_name' => null,
        'entitlement_limit_max' => null,
        'entitlement_limit_min' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'fixed_charge' => true,
        'price_name' => false,
        'unit_amount' => true,
        'feature_key' => false,
        'feature_name' => false,
        'entitlement_limit_max' => true,
        'entitlement_limit_min' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fixed_charge' => 'fixed_charge',
        'price_name' => 'price_name',
        'unit_amount' => 'unit_amount',
        'feature_key' => 'feature_key',
        'feature_name' => 'feature_name',
        'entitlement_limit_max' => 'entitlement_limit_max',
        'entitlement_limit_min' => 'entitlement_limit_min'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fixed_charge' => 'setFixedCharge',
        'price_name' => 'setPriceName',
        'unit_amount' => 'setUnitAmount',
        'feature_key' => 'setFeatureKey',
        'feature_name' => 'setFeatureName',
        'entitlement_limit_max' => 'setEntitlementLimitMax',
        'entitlement_limit_min' => 'setEntitlementLimitMin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fixed_charge' => 'getFixedCharge',
        'price_name' => 'getPriceName',
        'unit_amount' => 'getUnitAmount',
        'feature_key' => 'getFeatureKey',
        'feature_name' => 'getFeatureName',
        'entitlement_limit_max' => 'getEntitlementLimitMax',
        'entitlement_limit_min' => 'getEntitlementLimitMin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('fixed_charge', $data ?? [], null);
        $this->setIfExists('price_name', $data ?? [], null);
        $this->setIfExists('unit_amount', $data ?? [], null);
        $this->setIfExists('feature_key', $data ?? [], null);
        $this->setIfExists('feature_name', $data ?? [], null);
        $this->setIfExists('entitlement_limit_max', $data ?? [], null);
        $this->setIfExists('entitlement_limit_min', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The friendly id of an entitlement
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fixed_charge
     *
     * @return int|null
     */
    public function getFixedCharge()
    {
        return $this->container['fixed_charge'];
    }

    /**
     * Sets fixed_charge
     *
     * @param int|null $fixed_charge The price charged if this is an entitlement for a fixed charged
     *
     * @return self
     */
    public function setFixedCharge($fixed_charge)
    {
        if (is_null($fixed_charge)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_charge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_charge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_charge'] = $fixed_charge;

        return $this;
    }

    /**
     * Gets price_name
     *
     * @return string|null
     */
    public function getPriceName()
    {
        return $this->container['price_name'];
    }

    /**
     * Sets price_name
     *
     * @param string|null $price_name The name of the price associated with the entitlement
     *
     * @return self
     */
    public function setPriceName($price_name)
    {
        if (is_null($price_name)) {
            throw new \InvalidArgumentException('non-nullable price_name cannot be null');
        }
        $this->container['price_name'] = $price_name;

        return $this;
    }

    /**
     * Gets unit_amount
     *
     * @return int|null
     */
    public function getUnitAmount()
    {
        return $this->container['unit_amount'];
    }

    /**
     * Sets unit_amount
     *
     * @param int|null $unit_amount The price charged for this entitlement in cents
     *
     * @return self
     */
    public function setUnitAmount($unit_amount)
    {
        if (is_null($unit_amount)) {
            array_push($this->openAPINullablesSetToNull, 'unit_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_amount'] = $unit_amount;

        return $this;
    }

    /**
     * Gets feature_key
     *
     * @return string|null
     */
    public function getFeatureKey()
    {
        return $this->container['feature_key'];
    }

    /**
     * Sets feature_key
     *
     * @param string|null $feature_key The key of the feature corresponding to this entitlement
     *
     * @return self
     */
    public function setFeatureKey($feature_key)
    {
        if (is_null($feature_key)) {
            throw new \InvalidArgumentException('non-nullable feature_key cannot be null');
        }
        $this->container['feature_key'] = $feature_key;

        return $this;
    }

    /**
     * Gets feature_name
     *
     * @return string|null
     */
    public function getFeatureName()
    {
        return $this->container['feature_name'];
    }

    /**
     * Sets feature_name
     *
     * @param string|null $feature_name The name of the feature corresponding to this entitlement
     *
     * @return self
     */
    public function setFeatureName($feature_name)
    {
        if (is_null($feature_name)) {
            throw new \InvalidArgumentException('non-nullable feature_name cannot be null');
        }
        $this->container['feature_name'] = $feature_name;

        return $this;
    }

    /**
     * Gets entitlement_limit_max
     *
     * @return int|null
     */
    public function getEntitlementLimitMax()
    {
        return $this->container['entitlement_limit_max'];
    }

    /**
     * Sets entitlement_limit_max
     *
     * @param int|null $entitlement_limit_max The maximum number of units of the feature the customer is entitled to
     *
     * @return self
     */
    public function setEntitlementLimitMax($entitlement_limit_max)
    {
        if (is_null($entitlement_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'entitlement_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entitlement_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entitlement_limit_max'] = $entitlement_limit_max;

        return $this;
    }

    /**
     * Gets entitlement_limit_min
     *
     * @return int|null
     */
    public function getEntitlementLimitMin()
    {
        return $this->container['entitlement_limit_min'];
    }

    /**
     * Sets entitlement_limit_min
     *
     * @param int|null $entitlement_limit_min The minimum number of units of the feature the customer is entitled to
     *
     * @return self
     */
    public function setEntitlementLimitMin($entitlement_limit_min)
    {
        if (is_null($entitlement_limit_min)) {
            array_push($this->openAPINullablesSetToNull, 'entitlement_limit_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entitlement_limit_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entitlement_limit_min'] = $entitlement_limit_min;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


