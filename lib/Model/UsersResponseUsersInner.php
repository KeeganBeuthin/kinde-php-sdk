<?php
/**
 * UsersResponseUsersInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * UsersResponseUsersInner Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UsersResponseUsersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'users_response_users_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'provided_id' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'username' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'is_suspended' => 'bool',
        'picture' => 'string',
        'total_sign_ins' => 'int',
        'failed_sign_ins' => 'int',
        'last_signed_in' => 'string',
        'created_on' => 'string',
        'organizations' => 'string[]',
        'identities' => '\Kinde\KindeSDK\Model\UserIdentitiesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'provided_id' => null,
        'email' => null,
        'phone' => null,
        'username' => null,
        'last_name' => null,
        'first_name' => null,
        'is_suspended' => null,
        'picture' => null,
        'total_sign_ins' => null,
        'failed_sign_ins' => null,
        'last_signed_in' => null,
        'created_on' => null,
        'organizations' => null,
        'identities' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'provided_id' => false,
        'email' => false,
        'phone' => false,
        'username' => false,
        'last_name' => false,
        'first_name' => false,
        'is_suspended' => false,
        'picture' => false,
        'total_sign_ins' => true,
        'failed_sign_ins' => true,
        'last_signed_in' => true,
        'created_on' => true,
        'organizations' => false,
        'identities' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'provided_id' => 'provided_id',
        'email' => 'email',
        'phone' => 'phone',
        'username' => 'username',
        'last_name' => 'last_name',
        'first_name' => 'first_name',
        'is_suspended' => 'is_suspended',
        'picture' => 'picture',
        'total_sign_ins' => 'total_sign_ins',
        'failed_sign_ins' => 'failed_sign_ins',
        'last_signed_in' => 'last_signed_in',
        'created_on' => 'created_on',
        'organizations' => 'organizations',
        'identities' => 'identities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'provided_id' => 'setProvidedId',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'username' => 'setUsername',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'is_suspended' => 'setIsSuspended',
        'picture' => 'setPicture',
        'total_sign_ins' => 'setTotalSignIns',
        'failed_sign_ins' => 'setFailedSignIns',
        'last_signed_in' => 'setLastSignedIn',
        'created_on' => 'setCreatedOn',
        'organizations' => 'setOrganizations',
        'identities' => 'setIdentities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'provided_id' => 'getProvidedId',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'username' => 'getUsername',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'is_suspended' => 'getIsSuspended',
        'picture' => 'getPicture',
        'total_sign_ins' => 'getTotalSignIns',
        'failed_sign_ins' => 'getFailedSignIns',
        'last_signed_in' => 'getLastSignedIn',
        'created_on' => 'getCreatedOn',
        'organizations' => 'getOrganizations',
        'identities' => 'getIdentities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('provided_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('is_suspended', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('total_sign_ins', $data ?? [], null);
        $this->setIfExists('failed_sign_ins', $data ?? [], null);
        $this->setIfExists('last_signed_in', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('organizations', $data ?? [], null);
        $this->setIfExists('identities', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique ID of the user in Kinde.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets provided_id
     *
     * @return string|null
     */
    public function getProvidedId()
    {
        return $this->container['provided_id'];
    }

    /**
     * Sets provided_id
     *
     * @param string|null $provided_id External ID for user.
     *
     * @return self
     */
    public function setProvidedId($provided_id)
    {
        if (is_null($provided_id)) {
            throw new \InvalidArgumentException('non-nullable provided_id cannot be null');
        }
        $this->container['provided_id'] = $provided_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Default email address of the user in Kinde.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone User's primary phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Primary username of the user in Kinde.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name User's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name User's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets is_suspended
     *
     * @return bool|null
     */
    public function getIsSuspended()
    {
        return $this->container['is_suspended'];
    }

    /**
     * Sets is_suspended
     *
     * @param bool|null $is_suspended Whether the user is currently suspended or not.
     *
     * @return self
     */
    public function setIsSuspended($is_suspended)
    {
        if (is_null($is_suspended)) {
            throw new \InvalidArgumentException('non-nullable is_suspended cannot be null');
        }
        $this->container['is_suspended'] = $is_suspended;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture User's profile picture URL.
     *
     * @return self
     */
    public function setPicture($picture)
    {
        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets total_sign_ins
     *
     * @return int|null
     */
    public function getTotalSignIns()
    {
        return $this->container['total_sign_ins'];
    }

    /**
     * Sets total_sign_ins
     *
     * @param int|null $total_sign_ins Total number of user sign ins.
     *
     * @return self
     */
    public function setTotalSignIns($total_sign_ins)
    {
        if (is_null($total_sign_ins)) {
            array_push($this->openAPINullablesSetToNull, 'total_sign_ins');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_sign_ins', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_sign_ins'] = $total_sign_ins;

        return $this;
    }

    /**
     * Gets failed_sign_ins
     *
     * @return int|null
     */
    public function getFailedSignIns()
    {
        return $this->container['failed_sign_ins'];
    }

    /**
     * Sets failed_sign_ins
     *
     * @param int|null $failed_sign_ins Number of consecutive failed user sign ins.
     *
     * @return self
     */
    public function setFailedSignIns($failed_sign_ins)
    {
        if (is_null($failed_sign_ins)) {
            array_push($this->openAPINullablesSetToNull, 'failed_sign_ins');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failed_sign_ins', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failed_sign_ins'] = $failed_sign_ins;

        return $this;
    }

    /**
     * Gets last_signed_in
     *
     * @return string|null
     */
    public function getLastSignedIn()
    {
        return $this->container['last_signed_in'];
    }

    /**
     * Sets last_signed_in
     *
     * @param string|null $last_signed_in Last sign in date in ISO 8601 format.
     *
     * @return self
     */
    public function setLastSignedIn($last_signed_in)
    {
        if (is_null($last_signed_in)) {
            array_push($this->openAPINullablesSetToNull, 'last_signed_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_signed_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_signed_in'] = $last_signed_in;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return string|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param string|null $created_on Date of user creation in ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            array_push($this->openAPINullablesSetToNull, 'created_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return string[]|null
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param string[]|null $organizations Array of organizations a user belongs to.
     *
     * @return self
     */
    public function setOrganizations($organizations)
    {
        if (is_null($organizations)) {
            throw new \InvalidArgumentException('non-nullable organizations cannot be null');
        }
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets identities
     *
     * @return \Kinde\KindeSDK\Model\UserIdentitiesInner[]|null
     */
    public function getIdentities()
    {
        return $this->container['identities'];
    }

    /**
     * Sets identities
     *
     * @param \Kinde\KindeSDK\Model\UserIdentitiesInner[]|null $identities Array of identities belonging to the user.
     *
     * @return self
     */
    public function setIdentities($identities)
    {
        if (is_null($identities)) {
            throw new \InvalidArgumentException('non-nullable identities cannot be null');
        }
        $this->container['identities'] = $identities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


