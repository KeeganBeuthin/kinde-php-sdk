<?php
/**
 * UpdateOrganizationSessionsRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateOrganizationSessionsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateOrganizationSessionsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateOrganizationSessions_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_use_org_sso_session_policy' => 'bool',
        'sso_session_persistence_mode' => 'string',
        'is_use_org_authenticated_session_lifetime' => 'bool',
        'authenticated_session_lifetime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_use_org_sso_session_policy' => null,
        'sso_session_persistence_mode' => null,
        'is_use_org_authenticated_session_lifetime' => null,
        'authenticated_session_lifetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_use_org_sso_session_policy' => false,
        'sso_session_persistence_mode' => false,
        'is_use_org_authenticated_session_lifetime' => false,
        'authenticated_session_lifetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_use_org_sso_session_policy' => 'is_use_org_sso_session_policy',
        'sso_session_persistence_mode' => 'sso_session_persistence_mode',
        'is_use_org_authenticated_session_lifetime' => 'is_use_org_authenticated_session_lifetime',
        'authenticated_session_lifetime' => 'authenticated_session_lifetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_use_org_sso_session_policy' => 'setIsUseOrgSsoSessionPolicy',
        'sso_session_persistence_mode' => 'setSsoSessionPersistenceMode',
        'is_use_org_authenticated_session_lifetime' => 'setIsUseOrgAuthenticatedSessionLifetime',
        'authenticated_session_lifetime' => 'setAuthenticatedSessionLifetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_use_org_sso_session_policy' => 'getIsUseOrgSsoSessionPolicy',
        'sso_session_persistence_mode' => 'getSsoSessionPersistenceMode',
        'is_use_org_authenticated_session_lifetime' => 'getIsUseOrgAuthenticatedSessionLifetime',
        'authenticated_session_lifetime' => 'getAuthenticatedSessionLifetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SSO_SESSION_PERSISTENCE_MODE_PERSISTENT = 'persistent';
    public const SSO_SESSION_PERSISTENCE_MODE_NON_PERSISTENT = 'non-persistent';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoSessionPersistenceModeAllowableValues()
    {
        return [
            self::SSO_SESSION_PERSISTENCE_MODE_PERSISTENT,
            self::SSO_SESSION_PERSISTENCE_MODE_NON_PERSISTENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_use_org_sso_session_policy', $data ?? [], null);
        $this->setIfExists('sso_session_persistence_mode', $data ?? [], null);
        $this->setIfExists('is_use_org_authenticated_session_lifetime', $data ?? [], null);
        $this->setIfExists('authenticated_session_lifetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSsoSessionPersistenceModeAllowableValues();
        if (!is_null($this->container['sso_session_persistence_mode']) && !in_array($this->container['sso_session_persistence_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso_session_persistence_mode', must be one of '%s'",
                $this->container['sso_session_persistence_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_use_org_sso_session_policy
     *
     * @return bool|null
     */
    public function getIsUseOrgSsoSessionPolicy()
    {
        return $this->container['is_use_org_sso_session_policy'];
    }

    /**
     * Sets is_use_org_sso_session_policy
     *
     * @param bool|null $is_use_org_sso_session_policy Whether to use the organization's SSO session policy override.
     *
     * @return self
     */
    public function setIsUseOrgSsoSessionPolicy($is_use_org_sso_session_policy)
    {
        if (is_null($is_use_org_sso_session_policy)) {
            throw new \InvalidArgumentException('non-nullable is_use_org_sso_session_policy cannot be null');
        }
        $this->container['is_use_org_sso_session_policy'] = $is_use_org_sso_session_policy;

        return $this;
    }

    /**
     * Gets sso_session_persistence_mode
     *
     * @return string|null
     */
    public function getSsoSessionPersistenceMode()
    {
        return $this->container['sso_session_persistence_mode'];
    }

    /**
     * Sets sso_session_persistence_mode
     *
     * @param string|null $sso_session_persistence_mode Determines if the session should be persistent or not.
     *
     * @return self
     */
    public function setSsoSessionPersistenceMode($sso_session_persistence_mode)
    {
        if (is_null($sso_session_persistence_mode)) {
            throw new \InvalidArgumentException('non-nullable sso_session_persistence_mode cannot be null');
        }
        $allowedValues = $this->getSsoSessionPersistenceModeAllowableValues();
        if (!in_array($sso_session_persistence_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso_session_persistence_mode', must be one of '%s'",
                    $sso_session_persistence_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso_session_persistence_mode'] = $sso_session_persistence_mode;

        return $this;
    }

    /**
     * Gets is_use_org_authenticated_session_lifetime
     *
     * @return bool|null
     */
    public function getIsUseOrgAuthenticatedSessionLifetime()
    {
        return $this->container['is_use_org_authenticated_session_lifetime'];
    }

    /**
     * Sets is_use_org_authenticated_session_lifetime
     *
     * @param bool|null $is_use_org_authenticated_session_lifetime Whether to apply the organization's authenticated session lifetime override.
     *
     * @return self
     */
    public function setIsUseOrgAuthenticatedSessionLifetime($is_use_org_authenticated_session_lifetime)
    {
        if (is_null($is_use_org_authenticated_session_lifetime)) {
            throw new \InvalidArgumentException('non-nullable is_use_org_authenticated_session_lifetime cannot be null');
        }
        $this->container['is_use_org_authenticated_session_lifetime'] = $is_use_org_authenticated_session_lifetime;

        return $this;
    }

    /**
     * Gets authenticated_session_lifetime
     *
     * @return int|null
     */
    public function getAuthenticatedSessionLifetime()
    {
        return $this->container['authenticated_session_lifetime'];
    }

    /**
     * Sets authenticated_session_lifetime
     *
     * @param int|null $authenticated_session_lifetime Authenticated session lifetime in seconds.
     *
     * @return self
     */
    public function setAuthenticatedSessionLifetime($authenticated_session_lifetime)
    {
        if (is_null($authenticated_session_lifetime)) {
            throw new \InvalidArgumentException('non-nullable authenticated_session_lifetime cannot be null');
        }
        $this->container['authenticated_session_lifetime'] = $authenticated_session_lifetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


