<?php
/**
 * GetUserSessionsResponseSessionsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetUserSessionsResponseSessionsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetUserSessionsResponseSessionsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_user_sessions_response_sessions_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'string',
        'org_code' => 'string',
        'client_id' => 'string',
        'expires_on' => '\DateTime',
        'session_id' => 'string',
        'started_on' => '\DateTime',
        'updated_on' => '\DateTime',
        'connection_id' => 'string',
        'last_ip_address' => 'string',
        'last_user_agent' => 'string',
        'initial_ip_address' => 'string',
        'initial_user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => null,
        'org_code' => null,
        'client_id' => null,
        'expires_on' => 'date-time',
        'session_id' => null,
        'started_on' => 'date-time',
        'updated_on' => 'date-time',
        'connection_id' => null,
        'last_ip_address' => null,
        'last_user_agent' => null,
        'initial_ip_address' => null,
        'initial_user_agent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => false,
        'org_code' => true,
        'client_id' => false,
        'expires_on' => false,
        'session_id' => false,
        'started_on' => false,
        'updated_on' => false,
        'connection_id' => false,
        'last_ip_address' => false,
        'last_user_agent' => false,
        'initial_ip_address' => false,
        'initial_user_agent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'org_code' => 'org_code',
        'client_id' => 'client_id',
        'expires_on' => 'expires_on',
        'session_id' => 'session_id',
        'started_on' => 'started_on',
        'updated_on' => 'updated_on',
        'connection_id' => 'connection_id',
        'last_ip_address' => 'last_ip_address',
        'last_user_agent' => 'last_user_agent',
        'initial_ip_address' => 'initial_ip_address',
        'initial_user_agent' => 'initial_user_agent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'org_code' => 'setOrgCode',
        'client_id' => 'setClientId',
        'expires_on' => 'setExpiresOn',
        'session_id' => 'setSessionId',
        'started_on' => 'setStartedOn',
        'updated_on' => 'setUpdatedOn',
        'connection_id' => 'setConnectionId',
        'last_ip_address' => 'setLastIpAddress',
        'last_user_agent' => 'setLastUserAgent',
        'initial_ip_address' => 'setInitialIpAddress',
        'initial_user_agent' => 'setInitialUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'org_code' => 'getOrgCode',
        'client_id' => 'getClientId',
        'expires_on' => 'getExpiresOn',
        'session_id' => 'getSessionId',
        'started_on' => 'getStartedOn',
        'updated_on' => 'getUpdatedOn',
        'connection_id' => 'getConnectionId',
        'last_ip_address' => 'getLastIpAddress',
        'last_user_agent' => 'getLastUserAgent',
        'initial_ip_address' => 'getInitialIpAddress',
        'initial_user_agent' => 'getInitialUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('org_code', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('expires_on', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('started_on', $data ?? [], null);
        $this->setIfExists('updated_on', $data ?? [], null);
        $this->setIfExists('connection_id', $data ?? [], null);
        $this->setIfExists('last_ip_address', $data ?? [], null);
        $this->setIfExists('last_user_agent', $data ?? [], null);
        $this->setIfExists('initial_ip_address', $data ?? [], null);
        $this->setIfExists('initial_user_agent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The unique identifier of the user associated with the session.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets org_code
     *
     * @return string|null
     */
    public function getOrgCode()
    {
        return $this->container['org_code'];
    }

    /**
     * Sets org_code
     *
     * @param string|null $org_code The organization code associated with the session, if applicable.
     *
     * @return self
     */
    public function setOrgCode($org_code)
    {
        if (is_null($org_code)) {
            array_push($this->openAPINullablesSetToNull, 'org_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('org_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['org_code'] = $org_code;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id The client ID used to initiate the session.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets expires_on
     *
     * @return \DateTime|null
     */
    public function getExpiresOn()
    {
        return $this->container['expires_on'];
    }

    /**
     * Sets expires_on
     *
     * @param \DateTime|null $expires_on The timestamp indicating when the session will expire.
     *
     * @return self
     */
    public function setExpiresOn($expires_on)
    {
        if (is_null($expires_on)) {
            throw new \InvalidArgumentException('non-nullable expires_on cannot be null');
        }
        $this->container['expires_on'] = $expires_on;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id The unique identifier of the session.
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets started_on
     *
     * @return \DateTime|null
     */
    public function getStartedOn()
    {
        return $this->container['started_on'];
    }

    /**
     * Sets started_on
     *
     * @param \DateTime|null $started_on The timestamp when the session was initiated.
     *
     * @return self
     */
    public function setStartedOn($started_on)
    {
        if (is_null($started_on)) {
            throw new \InvalidArgumentException('non-nullable started_on cannot be null');
        }
        $this->container['started_on'] = $started_on;

        return $this;
    }

    /**
     * Gets updated_on
     *
     * @return \DateTime|null
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     *
     * @param \DateTime|null $updated_on The timestamp of the last update to the session.
     *
     * @return self
     */
    public function setUpdatedOn($updated_on)
    {
        if (is_null($updated_on)) {
            throw new \InvalidArgumentException('non-nullable updated_on cannot be null');
        }
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets connection_id
     *
     * @return string|null
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string|null $connection_id The identifier of the connection through which the session was established.
     *
     * @return self
     */
    public function setConnectionId($connection_id)
    {
        if (is_null($connection_id)) {
            throw new \InvalidArgumentException('non-nullable connection_id cannot be null');
        }
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets last_ip_address
     *
     * @return string|null
     */
    public function getLastIpAddress()
    {
        return $this->container['last_ip_address'];
    }

    /**
     * Sets last_ip_address
     *
     * @param string|null $last_ip_address The last known IP address of the user during this session.
     *
     * @return self
     */
    public function setLastIpAddress($last_ip_address)
    {
        if (is_null($last_ip_address)) {
            throw new \InvalidArgumentException('non-nullable last_ip_address cannot be null');
        }
        $this->container['last_ip_address'] = $last_ip_address;

        return $this;
    }

    /**
     * Gets last_user_agent
     *
     * @return string|null
     */
    public function getLastUserAgent()
    {
        return $this->container['last_user_agent'];
    }

    /**
     * Sets last_user_agent
     *
     * @param string|null $last_user_agent The last known user agent (browser or app) used during this session.
     *
     * @return self
     */
    public function setLastUserAgent($last_user_agent)
    {
        if (is_null($last_user_agent)) {
            throw new \InvalidArgumentException('non-nullable last_user_agent cannot be null');
        }
        $this->container['last_user_agent'] = $last_user_agent;

        return $this;
    }

    /**
     * Gets initial_ip_address
     *
     * @return string|null
     */
    public function getInitialIpAddress()
    {
        return $this->container['initial_ip_address'];
    }

    /**
     * Sets initial_ip_address
     *
     * @param string|null $initial_ip_address The IP address from which the session was initially started.
     *
     * @return self
     */
    public function setInitialIpAddress($initial_ip_address)
    {
        if (is_null($initial_ip_address)) {
            throw new \InvalidArgumentException('non-nullable initial_ip_address cannot be null');
        }
        $this->container['initial_ip_address'] = $initial_ip_address;

        return $this;
    }

    /**
     * Gets initial_user_agent
     *
     * @return string|null
     */
    public function getInitialUserAgent()
    {
        return $this->container['initial_user_agent'];
    }

    /**
     * Sets initial_user_agent
     *
     * @param string|null $initial_user_agent The user agent (browser or app) used when the session was first created.
     *
     * @return self
     */
    public function setInitialUserAgent($initial_user_agent)
    {
        if (is_null($initial_user_agent)) {
            throw new \InvalidArgumentException('non-nullable initial_user_agent cannot be null');
        }
        $this->container['initial_user_agent'] = $initial_user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


