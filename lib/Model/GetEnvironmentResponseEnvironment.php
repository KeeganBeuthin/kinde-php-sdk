<?php
/**
 * GetEnvironmentResponseEnvironment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * GetEnvironmentResponseEnvironment Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEnvironmentResponseEnvironment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_environment_response_environment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'name' => 'string',
        'hotjar_site_id' => 'string',
        'google_analytics_tag' => 'string',
        'is_default' => 'bool',
        'is_live' => 'bool',
        'kinde_domain' => 'string',
        'custom_domain' => 'string',
        'logo' => 'string',
        'logo_dark' => 'string',
        'favicon_svg' => 'string',
        'favicon_fallback' => 'string',
        'link_color' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor',
        'background_color' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentBackgroundColor',
        'button_color' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor',
        'button_text_color' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentBackgroundColor',
        'link_color_dark' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor',
        'background_color_dark' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor',
        'button_text_color_dark' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor',
        'button_color_dark' => '\Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor',
        'button_border_radius' => 'int',
        'card_border_radius' => 'int',
        'input_border_radius' => 'int',
        'theme_code' => 'string',
        'color_scheme' => 'string',
        'created_on' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'name' => null,
        'hotjar_site_id' => null,
        'google_analytics_tag' => null,
        'is_default' => null,
        'is_live' => null,
        'kinde_domain' => null,
        'custom_domain' => null,
        'logo' => null,
        'logo_dark' => null,
        'favicon_svg' => null,
        'favicon_fallback' => null,
        'link_color' => null,
        'background_color' => null,
        'button_color' => null,
        'button_text_color' => null,
        'link_color_dark' => null,
        'background_color_dark' => null,
        'button_text_color_dark' => null,
        'button_color_dark' => null,
        'button_border_radius' => null,
        'card_border_radius' => null,
        'input_border_radius' => null,
        'theme_code' => null,
        'color_scheme' => null,
        'created_on' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'name' => false,
        'hotjar_site_id' => true,
        'google_analytics_tag' => true,
        'is_default' => false,
        'is_live' => false,
        'kinde_domain' => false,
        'custom_domain' => true,
        'logo' => true,
        'logo_dark' => true,
        'favicon_svg' => true,
        'favicon_fallback' => true,
        'link_color' => true,
        'background_color' => true,
        'button_color' => true,
        'button_text_color' => true,
        'link_color_dark' => true,
        'background_color_dark' => true,
        'button_text_color_dark' => true,
        'button_color_dark' => true,
        'button_border_radius' => true,
        'card_border_radius' => true,
        'input_border_radius' => true,
        'theme_code' => false,
        'color_scheme' => false,
        'created_on' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'name' => 'name',
        'hotjar_site_id' => 'hotjar_site_id',
        'google_analytics_tag' => 'google_analytics_tag',
        'is_default' => 'is_default',
        'is_live' => 'is_live',
        'kinde_domain' => 'kinde_domain',
        'custom_domain' => 'custom_domain',
        'logo' => 'logo',
        'logo_dark' => 'logo_dark',
        'favicon_svg' => 'favicon_svg',
        'favicon_fallback' => 'favicon_fallback',
        'link_color' => 'link_color',
        'background_color' => 'background_color',
        'button_color' => 'button_color',
        'button_text_color' => 'button_text_color',
        'link_color_dark' => 'link_color_dark',
        'background_color_dark' => 'background_color_dark',
        'button_text_color_dark' => 'button_text_color_dark',
        'button_color_dark' => 'button_color_dark',
        'button_border_radius' => 'button_border_radius',
        'card_border_radius' => 'card_border_radius',
        'input_border_radius' => 'input_border_radius',
        'theme_code' => 'theme_code',
        'color_scheme' => 'color_scheme',
        'created_on' => 'created_on'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'name' => 'setName',
        'hotjar_site_id' => 'setHotjarSiteId',
        'google_analytics_tag' => 'setGoogleAnalyticsTag',
        'is_default' => 'setIsDefault',
        'is_live' => 'setIsLive',
        'kinde_domain' => 'setKindeDomain',
        'custom_domain' => 'setCustomDomain',
        'logo' => 'setLogo',
        'logo_dark' => 'setLogoDark',
        'favicon_svg' => 'setFaviconSvg',
        'favicon_fallback' => 'setFaviconFallback',
        'link_color' => 'setLinkColor',
        'background_color' => 'setBackgroundColor',
        'button_color' => 'setButtonColor',
        'button_text_color' => 'setButtonTextColor',
        'link_color_dark' => 'setLinkColorDark',
        'background_color_dark' => 'setBackgroundColorDark',
        'button_text_color_dark' => 'setButtonTextColorDark',
        'button_color_dark' => 'setButtonColorDark',
        'button_border_radius' => 'setButtonBorderRadius',
        'card_border_radius' => 'setCardBorderRadius',
        'input_border_radius' => 'setInputBorderRadius',
        'theme_code' => 'setThemeCode',
        'color_scheme' => 'setColorScheme',
        'created_on' => 'setCreatedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'name' => 'getName',
        'hotjar_site_id' => 'getHotjarSiteId',
        'google_analytics_tag' => 'getGoogleAnalyticsTag',
        'is_default' => 'getIsDefault',
        'is_live' => 'getIsLive',
        'kinde_domain' => 'getKindeDomain',
        'custom_domain' => 'getCustomDomain',
        'logo' => 'getLogo',
        'logo_dark' => 'getLogoDark',
        'favicon_svg' => 'getFaviconSvg',
        'favicon_fallback' => 'getFaviconFallback',
        'link_color' => 'getLinkColor',
        'background_color' => 'getBackgroundColor',
        'button_color' => 'getButtonColor',
        'button_text_color' => 'getButtonTextColor',
        'link_color_dark' => 'getLinkColorDark',
        'background_color_dark' => 'getBackgroundColorDark',
        'button_text_color_dark' => 'getButtonTextColorDark',
        'button_color_dark' => 'getButtonColorDark',
        'button_border_radius' => 'getButtonBorderRadius',
        'card_border_radius' => 'getCardBorderRadius',
        'input_border_radius' => 'getInputBorderRadius',
        'theme_code' => 'getThemeCode',
        'color_scheme' => 'getColorScheme',
        'created_on' => 'getCreatedOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const THEME_CODE_LIGHT = 'light';
    public const THEME_CODE_DARK = 'dark';
    public const THEME_CODE_USER_PREFERENCE = 'user_preference';
    public const COLOR_SCHEME_LIGHT = 'light';
    public const COLOR_SCHEME_DARK = 'dark';
    public const COLOR_SCHEME_LIGHT_DARK = 'light dark';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThemeCodeAllowableValues()
    {
        return [
            self::THEME_CODE_LIGHT,
            self::THEME_CODE_DARK,
            self::THEME_CODE_USER_PREFERENCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColorSchemeAllowableValues()
    {
        return [
            self::COLOR_SCHEME_LIGHT,
            self::COLOR_SCHEME_DARK,
            self::COLOR_SCHEME_LIGHT_DARK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('hotjar_site_id', $data ?? [], null);
        $this->setIfExists('google_analytics_tag', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('is_live', $data ?? [], null);
        $this->setIfExists('kinde_domain', $data ?? [], null);
        $this->setIfExists('custom_domain', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('logo_dark', $data ?? [], null);
        $this->setIfExists('favicon_svg', $data ?? [], null);
        $this->setIfExists('favicon_fallback', $data ?? [], null);
        $this->setIfExists('link_color', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('button_color', $data ?? [], null);
        $this->setIfExists('button_text_color', $data ?? [], null);
        $this->setIfExists('link_color_dark', $data ?? [], null);
        $this->setIfExists('background_color_dark', $data ?? [], null);
        $this->setIfExists('button_text_color_dark', $data ?? [], null);
        $this->setIfExists('button_color_dark', $data ?? [], null);
        $this->setIfExists('button_border_radius', $data ?? [], null);
        $this->setIfExists('card_border_radius', $data ?? [], null);
        $this->setIfExists('input_border_radius', $data ?? [], null);
        $this->setIfExists('theme_code', $data ?? [], null);
        $this->setIfExists('color_scheme', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getThemeCodeAllowableValues();
        if (!is_null($this->container['theme_code']) && !in_array($this->container['theme_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'theme_code', must be one of '%s'",
                $this->container['theme_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getColorSchemeAllowableValues();
        if (!is_null($this->container['color_scheme']) && !in_array($this->container['color_scheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'color_scheme', must be one of '%s'",
                $this->container['color_scheme'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The unique identifier for the environment.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The environment's name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets hotjar_site_id
     *
     * @return string|null
     */
    public function getHotjarSiteId()
    {
        return $this->container['hotjar_site_id'];
    }

    /**
     * Sets hotjar_site_id
     *
     * @param string|null $hotjar_site_id Your HotJar site ID.
     *
     * @return self
     */
    public function setHotjarSiteId($hotjar_site_id)
    {
        if (is_null($hotjar_site_id)) {
            array_push($this->openAPINullablesSetToNull, 'hotjar_site_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hotjar_site_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hotjar_site_id'] = $hotjar_site_id;

        return $this;
    }

    /**
     * Gets google_analytics_tag
     *
     * @return string|null
     */
    public function getGoogleAnalyticsTag()
    {
        return $this->container['google_analytics_tag'];
    }

    /**
     * Sets google_analytics_tag
     *
     * @param string|null $google_analytics_tag Your Google Analytics tag.
     *
     * @return self
     */
    public function setGoogleAnalyticsTag($google_analytics_tag)
    {
        if (is_null($google_analytics_tag)) {
            array_push($this->openAPINullablesSetToNull, 'google_analytics_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_analytics_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['google_analytics_tag'] = $google_analytics_tag;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default Whether the environment is the default. Typically this is your production environment.
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_live
     *
     * @return bool|null
     */
    public function getIsLive()
    {
        return $this->container['is_live'];
    }

    /**
     * Sets is_live
     *
     * @param bool|null $is_live Whether the environment is live.
     *
     * @return self
     */
    public function setIsLive($is_live)
    {
        if (is_null($is_live)) {
            throw new \InvalidArgumentException('non-nullable is_live cannot be null');
        }
        $this->container['is_live'] = $is_live;

        return $this;
    }

    /**
     * Gets kinde_domain
     *
     * @return string|null
     */
    public function getKindeDomain()
    {
        return $this->container['kinde_domain'];
    }

    /**
     * Sets kinde_domain
     *
     * @param string|null $kinde_domain Your domain on Kinde
     *
     * @return self
     */
    public function setKindeDomain($kinde_domain)
    {
        if (is_null($kinde_domain)) {
            throw new \InvalidArgumentException('non-nullable kinde_domain cannot be null');
        }
        $this->container['kinde_domain'] = $kinde_domain;

        return $this;
    }

    /**
     * Gets custom_domain
     *
     * @return string|null
     */
    public function getCustomDomain()
    {
        return $this->container['custom_domain'];
    }

    /**
     * Sets custom_domain
     *
     * @param string|null $custom_domain Your custom domain for the environment
     *
     * @return self
     */
    public function setCustomDomain($custom_domain)
    {
        if (is_null($custom_domain)) {
            array_push($this->openAPINullablesSetToNull, 'custom_domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_domain'] = $custom_domain;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo The organization's logo URL.
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, 'logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets logo_dark
     *
     * @return string|null
     */
    public function getLogoDark()
    {
        return $this->container['logo_dark'];
    }

    /**
     * Sets logo_dark
     *
     * @param string|null $logo_dark The organization's logo URL to be used for dark themes.
     *
     * @return self
     */
    public function setLogoDark($logo_dark)
    {
        if (is_null($logo_dark)) {
            array_push($this->openAPINullablesSetToNull, 'logo_dark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_dark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_dark'] = $logo_dark;

        return $this;
    }

    /**
     * Gets favicon_svg
     *
     * @return string|null
     */
    public function getFaviconSvg()
    {
        return $this->container['favicon_svg'];
    }

    /**
     * Sets favicon_svg
     *
     * @param string|null $favicon_svg The organization's SVG favicon URL. Optimal format for most browsers
     *
     * @return self
     */
    public function setFaviconSvg($favicon_svg)
    {
        if (is_null($favicon_svg)) {
            array_push($this->openAPINullablesSetToNull, 'favicon_svg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favicon_svg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favicon_svg'] = $favicon_svg;

        return $this;
    }

    /**
     * Gets favicon_fallback
     *
     * @return string|null
     */
    public function getFaviconFallback()
    {
        return $this->container['favicon_fallback'];
    }

    /**
     * Sets favicon_fallback
     *
     * @param string|null $favicon_fallback The favicon URL to be used as a fallback in browsers that don’t support SVG, add a PNG
     *
     * @return self
     */
    public function setFaviconFallback($favicon_fallback)
    {
        if (is_null($favicon_fallback)) {
            array_push($this->openAPINullablesSetToNull, 'favicon_fallback');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favicon_fallback', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favicon_fallback'] = $favicon_fallback;

        return $this;
    }

    /**
     * Gets link_color
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null
     */
    public function getLinkColor()
    {
        return $this->container['link_color'];
    }

    /**
     * Sets link_color
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null $link_color link_color
     *
     * @return self
     */
    public function setLinkColor($link_color)
    {
        if (is_null($link_color)) {
            array_push($this->openAPINullablesSetToNull, 'link_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link_color'] = $link_color;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentBackgroundColor|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentBackgroundColor|null $background_color background_color
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            array_push($this->openAPINullablesSetToNull, 'background_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null $button_color button_color
     *
     * @return self
     */
    public function setButtonColor($button_color)
    {
        if (is_null($button_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets button_text_color
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentBackgroundColor|null
     */
    public function getButtonTextColor()
    {
        return $this->container['button_text_color'];
    }

    /**
     * Sets button_text_color
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentBackgroundColor|null $button_text_color button_text_color
     *
     * @return self
     */
    public function setButtonTextColor($button_text_color)
    {
        if (is_null($button_text_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_text_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_text_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_text_color'] = $button_text_color;

        return $this;
    }

    /**
     * Gets link_color_dark
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null
     */
    public function getLinkColorDark()
    {
        return $this->container['link_color_dark'];
    }

    /**
     * Sets link_color_dark
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null $link_color_dark link_color_dark
     *
     * @return self
     */
    public function setLinkColorDark($link_color_dark)
    {
        if (is_null($link_color_dark)) {
            array_push($this->openAPINullablesSetToNull, 'link_color_dark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_color_dark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link_color_dark'] = $link_color_dark;

        return $this;
    }

    /**
     * Gets background_color_dark
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null
     */
    public function getBackgroundColorDark()
    {
        return $this->container['background_color_dark'];
    }

    /**
     * Sets background_color_dark
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null $background_color_dark background_color_dark
     *
     * @return self
     */
    public function setBackgroundColorDark($background_color_dark)
    {
        if (is_null($background_color_dark)) {
            array_push($this->openAPINullablesSetToNull, 'background_color_dark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_color_dark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_color_dark'] = $background_color_dark;

        return $this;
    }

    /**
     * Gets button_text_color_dark
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null
     */
    public function getButtonTextColorDark()
    {
        return $this->container['button_text_color_dark'];
    }

    /**
     * Sets button_text_color_dark
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null $button_text_color_dark button_text_color_dark
     *
     * @return self
     */
    public function setButtonTextColorDark($button_text_color_dark)
    {
        if (is_null($button_text_color_dark)) {
            array_push($this->openAPINullablesSetToNull, 'button_text_color_dark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_text_color_dark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_text_color_dark'] = $button_text_color_dark;

        return $this;
    }

    /**
     * Gets button_color_dark
     *
     * @return \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null
     */
    public function getButtonColorDark()
    {
        return $this->container['button_color_dark'];
    }

    /**
     * Sets button_color_dark
     *
     * @param \Kinde\KindeSDK\Model\GetEnvironmentResponseEnvironmentLinkColor|null $button_color_dark button_color_dark
     *
     * @return self
     */
    public function setButtonColorDark($button_color_dark)
    {
        if (is_null($button_color_dark)) {
            array_push($this->openAPINullablesSetToNull, 'button_color_dark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_color_dark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_color_dark'] = $button_color_dark;

        return $this;
    }

    /**
     * Gets button_border_radius
     *
     * @return int|null
     */
    public function getButtonBorderRadius()
    {
        return $this->container['button_border_radius'];
    }

    /**
     * Sets button_border_radius
     *
     * @param int|null $button_border_radius The border radius for buttons. Value is px, Kinde transforms to rem for rendering
     *
     * @return self
     */
    public function setButtonBorderRadius($button_border_radius)
    {
        if (is_null($button_border_radius)) {
            array_push($this->openAPINullablesSetToNull, 'button_border_radius');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_border_radius', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_border_radius'] = $button_border_radius;

        return $this;
    }

    /**
     * Gets card_border_radius
     *
     * @return int|null
     */
    public function getCardBorderRadius()
    {
        return $this->container['card_border_radius'];
    }

    /**
     * Sets card_border_radius
     *
     * @param int|null $card_border_radius The border radius for cards. Value is px, Kinde transforms to rem for rendering
     *
     * @return self
     */
    public function setCardBorderRadius($card_border_radius)
    {
        if (is_null($card_border_radius)) {
            array_push($this->openAPINullablesSetToNull, 'card_border_radius');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_border_radius', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_border_radius'] = $card_border_radius;

        return $this;
    }

    /**
     * Gets input_border_radius
     *
     * @return int|null
     */
    public function getInputBorderRadius()
    {
        return $this->container['input_border_radius'];
    }

    /**
     * Sets input_border_radius
     *
     * @param int|null $input_border_radius The border radius for inputs. Value is px, Kinde transforms to rem for rendering
     *
     * @return self
     */
    public function setInputBorderRadius($input_border_radius)
    {
        if (is_null($input_border_radius)) {
            array_push($this->openAPINullablesSetToNull, 'input_border_radius');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_border_radius', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_border_radius'] = $input_border_radius;

        return $this;
    }

    /**
     * Gets theme_code
     *
     * @return string|null
     */
    public function getThemeCode()
    {
        return $this->container['theme_code'];
    }

    /**
     * Sets theme_code
     *
     * @param string|null $theme_code Whether the environment is forced into light mode, dark mode or user preference
     *
     * @return self
     */
    public function setThemeCode($theme_code)
    {
        if (is_null($theme_code)) {
            throw new \InvalidArgumentException('non-nullable theme_code cannot be null');
        }
        $allowedValues = $this->getThemeCodeAllowableValues();
        if (!in_array($theme_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'theme_code', must be one of '%s'",
                    $theme_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['theme_code'] = $theme_code;

        return $this;
    }

    /**
     * Gets color_scheme
     *
     * @return string|null
     */
    public function getColorScheme()
    {
        return $this->container['color_scheme'];
    }

    /**
     * Sets color_scheme
     *
     * @param string|null $color_scheme The color scheme for the environment used for meta tags based on the theme code
     *
     * @return self
     */
    public function setColorScheme($color_scheme)
    {
        if (is_null($color_scheme)) {
            throw new \InvalidArgumentException('non-nullable color_scheme cannot be null');
        }
        $allowedValues = $this->getColorSchemeAllowableValues();
        if (!in_array($color_scheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'color_scheme', must be one of '%s'",
                    $color_scheme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['color_scheme'] = $color_scheme;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return string|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param string|null $created_on Date of environment creation in ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


