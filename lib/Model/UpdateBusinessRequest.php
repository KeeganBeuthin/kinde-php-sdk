<?php
/**
 * UpdateBusinessRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * UpdateBusinessRequest Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateBusinessRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateBusiness_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_name' => 'string',
        'email' => 'string',
        'industry_key' => 'string',
        'is_click_wrap' => 'bool',
        'is_show_kinde_branding' => 'bool',
        'kinde_perk_code' => 'string',
        'phone' => 'string',
        'privacy_url' => 'string',
        'terms_url' => 'string',
        'timezone_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_name' => null,
        'email' => null,
        'industry_key' => null,
        'is_click_wrap' => null,
        'is_show_kinde_branding' => null,
        'kinde_perk_code' => null,
        'phone' => null,
        'privacy_url' => null,
        'terms_url' => null,
        'timezone_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_name' => true,
        'email' => true,
        'industry_key' => true,
        'is_click_wrap' => true,
        'is_show_kinde_branding' => true,
        'kinde_perk_code' => true,
        'phone' => true,
        'privacy_url' => true,
        'terms_url' => true,
        'timezone_key' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_name' => 'business_name',
        'email' => 'email',
        'industry_key' => 'industry_key',
        'is_click_wrap' => 'is_click_wrap',
        'is_show_kinde_branding' => 'is_show_kinde_branding',
        'kinde_perk_code' => 'kinde_perk_code',
        'phone' => 'phone',
        'privacy_url' => 'privacy_url',
        'terms_url' => 'terms_url',
        'timezone_key' => 'timezone_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_name' => 'setBusinessName',
        'email' => 'setEmail',
        'industry_key' => 'setIndustryKey',
        'is_click_wrap' => 'setIsClickWrap',
        'is_show_kinde_branding' => 'setIsShowKindeBranding',
        'kinde_perk_code' => 'setKindePerkCode',
        'phone' => 'setPhone',
        'privacy_url' => 'setPrivacyUrl',
        'terms_url' => 'setTermsUrl',
        'timezone_key' => 'setTimezoneKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_name' => 'getBusinessName',
        'email' => 'getEmail',
        'industry_key' => 'getIndustryKey',
        'is_click_wrap' => 'getIsClickWrap',
        'is_show_kinde_branding' => 'getIsShowKindeBranding',
        'kinde_perk_code' => 'getKindePerkCode',
        'phone' => 'getPhone',
        'privacy_url' => 'getPrivacyUrl',
        'terms_url' => 'getTermsUrl',
        'timezone_key' => 'getTimezoneKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('industry_key', $data ?? [], null);
        $this->setIfExists('is_click_wrap', $data ?? [], null);
        $this->setIfExists('is_show_kinde_branding', $data ?? [], null);
        $this->setIfExists('kinde_perk_code', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('privacy_url', $data ?? [], null);
        $this->setIfExists('terms_url', $data ?? [], null);
        $this->setIfExists('timezone_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_name
     *
     * @return string|null
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string|null $business_name The name of the business.
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            array_push($this->openAPINullablesSetToNull, 'business_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the business.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets industry_key
     *
     * @return string|null
     */
    public function getIndustryKey()
    {
        return $this->container['industry_key'];
    }

    /**
     * Sets industry_key
     *
     * @param string|null $industry_key The key of the industry of your business. Can be retrieved from the /industries endpoint.
     *
     * @return self
     */
    public function setIndustryKey($industry_key)
    {
        if (is_null($industry_key)) {
            array_push($this->openAPINullablesSetToNull, 'industry_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_key'] = $industry_key;

        return $this;
    }

    /**
     * Gets is_click_wrap
     *
     * @return bool|null
     */
    public function getIsClickWrap()
    {
        return $this->container['is_click_wrap'];
    }

    /**
     * Sets is_click_wrap
     *
     * @param bool|null $is_click_wrap Whether the business is using clickwrap agreements.
     *
     * @return self
     */
    public function setIsClickWrap($is_click_wrap)
    {
        if (is_null($is_click_wrap)) {
            array_push($this->openAPINullablesSetToNull, 'is_click_wrap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_click_wrap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_click_wrap'] = $is_click_wrap;

        return $this;
    }

    /**
     * Gets is_show_kinde_branding
     *
     * @return bool|null
     */
    public function getIsShowKindeBranding()
    {
        return $this->container['is_show_kinde_branding'];
    }

    /**
     * Sets is_show_kinde_branding
     *
     * @param bool|null $is_show_kinde_branding Whether the business is showing Kinde branding. Requires a paid plan.
     *
     * @return self
     */
    public function setIsShowKindeBranding($is_show_kinde_branding)
    {
        if (is_null($is_show_kinde_branding)) {
            array_push($this->openAPINullablesSetToNull, 'is_show_kinde_branding');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_show_kinde_branding', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_show_kinde_branding'] = $is_show_kinde_branding;

        return $this;
    }

    /**
     * Gets kinde_perk_code
     *
     * @return string|null
     */
    public function getKindePerkCode()
    {
        return $this->container['kinde_perk_code'];
    }

    /**
     * Sets kinde_perk_code
     *
     * @param string|null $kinde_perk_code The Kinde perk code for the business.
     *
     * @return self
     */
    public function setKindePerkCode($kinde_perk_code)
    {
        if (is_null($kinde_perk_code)) {
            array_push($this->openAPINullablesSetToNull, 'kinde_perk_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kinde_perk_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kinde_perk_code'] = $kinde_perk_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The phone number of the business.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets privacy_url
     *
     * @return string|null
     */
    public function getPrivacyUrl()
    {
        return $this->container['privacy_url'];
    }

    /**
     * Sets privacy_url
     *
     * @param string|null $privacy_url The URL to the business's privacy policy.
     *
     * @return self
     */
    public function setPrivacyUrl($privacy_url)
    {
        if (is_null($privacy_url)) {
            array_push($this->openAPINullablesSetToNull, 'privacy_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('privacy_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['privacy_url'] = $privacy_url;

        return $this;
    }

    /**
     * Gets terms_url
     *
     * @return string|null
     */
    public function getTermsUrl()
    {
        return $this->container['terms_url'];
    }

    /**
     * Sets terms_url
     *
     * @param string|null $terms_url The URL to the business's terms of service.
     *
     * @return self
     */
    public function setTermsUrl($terms_url)
    {
        if (is_null($terms_url)) {
            array_push($this->openAPINullablesSetToNull, 'terms_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terms_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terms_url'] = $terms_url;

        return $this;
    }

    /**
     * Gets timezone_key
     *
     * @return string|null
     */
    public function getTimezoneKey()
    {
        return $this->container['timezone_key'];
    }

    /**
     * Sets timezone_key
     *
     * @param string|null $timezone_key The key of the timezone of your business. Can be retrieved from the /timezones endpoint.
     *
     * @return self
     */
    public function setTimezoneKey($timezone_key)
    {
        if (is_null($timezone_key)) {
            array_push($this->openAPINullablesSetToNull, 'timezone_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone_key'] = $timezone_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


