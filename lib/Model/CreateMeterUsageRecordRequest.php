<?php
/**
 * CreateMeterUsageRecordRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * CreateMeterUsageRecordRequest Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateMeterUsageRecordRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createMeterUsageRecord_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_agreement_id' => 'string',
        'billing_feature_code' => 'string',
        'meter_value' => 'string',
        'meter_usage_timestamp' => '\DateTime',
        'meter_type_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_agreement_id' => null,
        'billing_feature_code' => null,
        'meter_value' => null,
        'meter_usage_timestamp' => 'date-time',
        'meter_type_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_agreement_id' => false,
        'billing_feature_code' => false,
        'meter_value' => false,
        'meter_usage_timestamp' => false,
        'meter_type_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_agreement_id' => 'customer_agreement_id',
        'billing_feature_code' => 'billing_feature_code',
        'meter_value' => 'meter_value',
        'meter_usage_timestamp' => 'meter_usage_timestamp',
        'meter_type_code' => 'meter_type_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_agreement_id' => 'setCustomerAgreementId',
        'billing_feature_code' => 'setBillingFeatureCode',
        'meter_value' => 'setMeterValue',
        'meter_usage_timestamp' => 'setMeterUsageTimestamp',
        'meter_type_code' => 'setMeterTypeCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_agreement_id' => 'getCustomerAgreementId',
        'billing_feature_code' => 'getBillingFeatureCode',
        'meter_value' => 'getMeterValue',
        'meter_usage_timestamp' => 'getMeterUsageTimestamp',
        'meter_type_code' => 'getMeterTypeCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const METER_TYPE_CODE_ABSOLUTE = 'absolute';
    public const METER_TYPE_CODE_DELTA = 'delta';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeterTypeCodeAllowableValues()
    {
        return [
            self::METER_TYPE_CODE_ABSOLUTE,
            self::METER_TYPE_CODE_DELTA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('customer_agreement_id', $data ?? [], null);
        $this->setIfExists('billing_feature_code', $data ?? [], null);
        $this->setIfExists('meter_value', $data ?? [], null);
        $this->setIfExists('meter_usage_timestamp', $data ?? [], null);
        $this->setIfExists('meter_type_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_agreement_id'] === null) {
            $invalidProperties[] = "'customer_agreement_id' can't be null";
        }
        if ($this->container['billing_feature_code'] === null) {
            $invalidProperties[] = "'billing_feature_code' can't be null";
        }
        if ($this->container['meter_value'] === null) {
            $invalidProperties[] = "'meter_value' can't be null";
        }
        $allowedValues = $this->getMeterTypeCodeAllowableValues();
        if (!is_null($this->container['meter_type_code']) && !in_array($this->container['meter_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meter_type_code', must be one of '%s'",
                $this->container['meter_type_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_agreement_id
     *
     * @return string
     */
    public function getCustomerAgreementId()
    {
        return $this->container['customer_agreement_id'];
    }

    /**
     * Sets customer_agreement_id
     *
     * @param string $customer_agreement_id The billing agreement against which to record usage
     *
     * @return self
     */
    public function setCustomerAgreementId($customer_agreement_id)
    {
        if (is_null($customer_agreement_id)) {
            throw new \InvalidArgumentException('non-nullable customer_agreement_id cannot be null');
        }
        $this->container['customer_agreement_id'] = $customer_agreement_id;

        return $this;
    }

    /**
     * Gets billing_feature_code
     *
     * @return string
     */
    public function getBillingFeatureCode()
    {
        return $this->container['billing_feature_code'];
    }

    /**
     * Sets billing_feature_code
     *
     * @param string $billing_feature_code The code of the feature within the agreement against which to record usage
     *
     * @return self
     */
    public function setBillingFeatureCode($billing_feature_code)
    {
        if (is_null($billing_feature_code)) {
            throw new \InvalidArgumentException('non-nullable billing_feature_code cannot be null');
        }
        $this->container['billing_feature_code'] = $billing_feature_code;

        return $this;
    }

    /**
     * Gets meter_value
     *
     * @return string
     */
    public function getMeterValue()
    {
        return $this->container['meter_value'];
    }

    /**
     * Sets meter_value
     *
     * @param string $meter_value The value of usage to record
     *
     * @return self
     */
    public function setMeterValue($meter_value)
    {
        if (is_null($meter_value)) {
            throw new \InvalidArgumentException('non-nullable meter_value cannot be null');
        }
        $this->container['meter_value'] = $meter_value;

        return $this;
    }

    /**
     * Gets meter_usage_timestamp
     *
     * @return \DateTime|null
     */
    public function getMeterUsageTimestamp()
    {
        return $this->container['meter_usage_timestamp'];
    }

    /**
     * Sets meter_usage_timestamp
     *
     * @param \DateTime|null $meter_usage_timestamp The date and time the usage needs to be recorded for (defaults to current date/time)
     *
     * @return self
     */
    public function setMeterUsageTimestamp($meter_usage_timestamp)
    {
        if (is_null($meter_usage_timestamp)) {
            throw new \InvalidArgumentException('non-nullable meter_usage_timestamp cannot be null');
        }
        $this->container['meter_usage_timestamp'] = $meter_usage_timestamp;

        return $this;
    }

    /**
     * Gets meter_type_code
     *
     * @return string|null
     */
    public function getMeterTypeCode()
    {
        return $this->container['meter_type_code'];
    }

    /**
     * Sets meter_type_code
     *
     * @param string|null $meter_type_code Absolutes overrides the current usage
     *
     * @return self
     */
    public function setMeterTypeCode($meter_type_code)
    {
        if (is_null($meter_type_code)) {
            throw new \InvalidArgumentException('non-nullable meter_type_code cannot be null');
        }
        $allowedValues = $this->getMeterTypeCodeAllowableValues();
        if (!in_array($meter_type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meter_type_code', must be one of '%s'",
                    $meter_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meter_type_code'] = $meter_type_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


