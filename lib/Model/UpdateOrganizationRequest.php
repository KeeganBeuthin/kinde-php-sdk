<?php
/**
 * UpdateOrganizationRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * UpdateOrganizationRequest Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateOrganizationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateOrganization_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'external_id' => 'string',
        'background_color' => 'string',
        'button_color' => 'string',
        'button_text_color' => 'string',
        'link_color' => 'string',
        'background_color_dark' => 'string',
        'button_color_dark' => 'string',
        'button_text_color_dark' => 'string',
        'link_color_dark' => 'string',
        'theme_code' => 'string',
        'handle' => 'string',
        'is_allow_registrations' => 'bool',
        'is_auto_join_domain_list' => 'bool',
        'allowed_domains' => 'string[]',
        'is_enable_advanced_orgs' => 'bool',
        'is_enforce_mfa' => 'bool',
        'sender_name' => 'string',
        'sender_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'external_id' => null,
        'background_color' => null,
        'button_color' => null,
        'button_text_color' => null,
        'link_color' => null,
        'background_color_dark' => null,
        'button_color_dark' => null,
        'button_text_color_dark' => null,
        'link_color_dark' => null,
        'theme_code' => null,
        'handle' => null,
        'is_allow_registrations' => null,
        'is_auto_join_domain_list' => null,
        'allowed_domains' => null,
        'is_enable_advanced_orgs' => null,
        'is_enforce_mfa' => null,
        'sender_name' => null,
        'sender_email' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'external_id' => false,
        'background_color' => false,
        'button_color' => false,
        'button_text_color' => false,
        'link_color' => false,
        'background_color_dark' => false,
        'button_color_dark' => false,
        'button_text_color_dark' => false,
        'link_color_dark' => false,
        'theme_code' => false,
        'handle' => false,
        'is_allow_registrations' => false,
        'is_auto_join_domain_list' => false,
        'allowed_domains' => false,
        'is_enable_advanced_orgs' => false,
        'is_enforce_mfa' => false,
        'sender_name' => true,
        'sender_email' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'external_id' => 'external_id',
        'background_color' => 'background_color',
        'button_color' => 'button_color',
        'button_text_color' => 'button_text_color',
        'link_color' => 'link_color',
        'background_color_dark' => 'background_color_dark',
        'button_color_dark' => 'button_color_dark',
        'button_text_color_dark' => 'button_text_color_dark',
        'link_color_dark' => 'link_color_dark',
        'theme_code' => 'theme_code',
        'handle' => 'handle',
        'is_allow_registrations' => 'is_allow_registrations',
        'is_auto_join_domain_list' => 'is_auto_join_domain_list',
        'allowed_domains' => 'allowed_domains',
        'is_enable_advanced_orgs' => 'is_enable_advanced_orgs',
        'is_enforce_mfa' => 'is_enforce_mfa',
        'sender_name' => 'sender_name',
        'sender_email' => 'sender_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'background_color' => 'setBackgroundColor',
        'button_color' => 'setButtonColor',
        'button_text_color' => 'setButtonTextColor',
        'link_color' => 'setLinkColor',
        'background_color_dark' => 'setBackgroundColorDark',
        'button_color_dark' => 'setButtonColorDark',
        'button_text_color_dark' => 'setButtonTextColorDark',
        'link_color_dark' => 'setLinkColorDark',
        'theme_code' => 'setThemeCode',
        'handle' => 'setHandle',
        'is_allow_registrations' => 'setIsAllowRegistrations',
        'is_auto_join_domain_list' => 'setIsAutoJoinDomainList',
        'allowed_domains' => 'setAllowedDomains',
        'is_enable_advanced_orgs' => 'setIsEnableAdvancedOrgs',
        'is_enforce_mfa' => 'setIsEnforceMfa',
        'sender_name' => 'setSenderName',
        'sender_email' => 'setSenderEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'background_color' => 'getBackgroundColor',
        'button_color' => 'getButtonColor',
        'button_text_color' => 'getButtonTextColor',
        'link_color' => 'getLinkColor',
        'background_color_dark' => 'getBackgroundColorDark',
        'button_color_dark' => 'getButtonColorDark',
        'button_text_color_dark' => 'getButtonTextColorDark',
        'link_color_dark' => 'getLinkColorDark',
        'theme_code' => 'getThemeCode',
        'handle' => 'getHandle',
        'is_allow_registrations' => 'getIsAllowRegistrations',
        'is_auto_join_domain_list' => 'getIsAutoJoinDomainList',
        'allowed_domains' => 'getAllowedDomains',
        'is_enable_advanced_orgs' => 'getIsEnableAdvancedOrgs',
        'is_enforce_mfa' => 'getIsEnforceMfa',
        'sender_name' => 'getSenderName',
        'sender_email' => 'getSenderEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const THEME_CODE_LIGHT = 'light';
    public const THEME_CODE_DARK = 'dark';
    public const THEME_CODE_USER_PREFERENCE = 'user_preference';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThemeCodeAllowableValues()
    {
        return [
            self::THEME_CODE_LIGHT,
            self::THEME_CODE_DARK,
            self::THEME_CODE_USER_PREFERENCE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('button_color', $data ?? [], null);
        $this->setIfExists('button_text_color', $data ?? [], null);
        $this->setIfExists('link_color', $data ?? [], null);
        $this->setIfExists('background_color_dark', $data ?? [], null);
        $this->setIfExists('button_color_dark', $data ?? [], null);
        $this->setIfExists('button_text_color_dark', $data ?? [], null);
        $this->setIfExists('link_color_dark', $data ?? [], null);
        $this->setIfExists('theme_code', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('is_allow_registrations', $data ?? [], null);
        $this->setIfExists('is_auto_join_domain_list', $data ?? [], null);
        $this->setIfExists('allowed_domains', $data ?? [], null);
        $this->setIfExists('is_enable_advanced_orgs', $data ?? [], null);
        $this->setIfExists('is_enforce_mfa', $data ?? [], null);
        $this->setIfExists('sender_name', $data ?? [], null);
        $this->setIfExists('sender_email', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getThemeCodeAllowableValues();
        if (!is_null($this->container['theme_code']) && !in_array($this->container['theme_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'theme_code', must be one of '%s'",
                $this->container['theme_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The organization's name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The organization's ID.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color The organization's brand settings - background color.
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return string|null
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param string|null $button_color The organization's brand settings - button color.
     *
     * @return self
     */
    public function setButtonColor($button_color)
    {
        if (is_null($button_color)) {
            throw new \InvalidArgumentException('non-nullable button_color cannot be null');
        }
        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets button_text_color
     *
     * @return string|null
     */
    public function getButtonTextColor()
    {
        return $this->container['button_text_color'];
    }

    /**
     * Sets button_text_color
     *
     * @param string|null $button_text_color The organization's brand settings - button text color.
     *
     * @return self
     */
    public function setButtonTextColor($button_text_color)
    {
        if (is_null($button_text_color)) {
            throw new \InvalidArgumentException('non-nullable button_text_color cannot be null');
        }
        $this->container['button_text_color'] = $button_text_color;

        return $this;
    }

    /**
     * Gets link_color
     *
     * @return string|null
     */
    public function getLinkColor()
    {
        return $this->container['link_color'];
    }

    /**
     * Sets link_color
     *
     * @param string|null $link_color The organization's brand settings - link color.
     *
     * @return self
     */
    public function setLinkColor($link_color)
    {
        if (is_null($link_color)) {
            throw new \InvalidArgumentException('non-nullable link_color cannot be null');
        }
        $this->container['link_color'] = $link_color;

        return $this;
    }

    /**
     * Gets background_color_dark
     *
     * @return string|null
     */
    public function getBackgroundColorDark()
    {
        return $this->container['background_color_dark'];
    }

    /**
     * Sets background_color_dark
     *
     * @param string|null $background_color_dark The organization's brand settings - dark mode background color.
     *
     * @return self
     */
    public function setBackgroundColorDark($background_color_dark)
    {
        if (is_null($background_color_dark)) {
            throw new \InvalidArgumentException('non-nullable background_color_dark cannot be null');
        }
        $this->container['background_color_dark'] = $background_color_dark;

        return $this;
    }

    /**
     * Gets button_color_dark
     *
     * @return string|null
     */
    public function getButtonColorDark()
    {
        return $this->container['button_color_dark'];
    }

    /**
     * Sets button_color_dark
     *
     * @param string|null $button_color_dark The organization's brand settings - dark mode button color.
     *
     * @return self
     */
    public function setButtonColorDark($button_color_dark)
    {
        if (is_null($button_color_dark)) {
            throw new \InvalidArgumentException('non-nullable button_color_dark cannot be null');
        }
        $this->container['button_color_dark'] = $button_color_dark;

        return $this;
    }

    /**
     * Gets button_text_color_dark
     *
     * @return string|null
     */
    public function getButtonTextColorDark()
    {
        return $this->container['button_text_color_dark'];
    }

    /**
     * Sets button_text_color_dark
     *
     * @param string|null $button_text_color_dark The organization's brand settings - dark mode button text color.
     *
     * @return self
     */
    public function setButtonTextColorDark($button_text_color_dark)
    {
        if (is_null($button_text_color_dark)) {
            throw new \InvalidArgumentException('non-nullable button_text_color_dark cannot be null');
        }
        $this->container['button_text_color_dark'] = $button_text_color_dark;

        return $this;
    }

    /**
     * Gets link_color_dark
     *
     * @return string|null
     */
    public function getLinkColorDark()
    {
        return $this->container['link_color_dark'];
    }

    /**
     * Sets link_color_dark
     *
     * @param string|null $link_color_dark The organization's brand settings - dark mode link color.
     *
     * @return self
     */
    public function setLinkColorDark($link_color_dark)
    {
        if (is_null($link_color_dark)) {
            throw new \InvalidArgumentException('non-nullable link_color_dark cannot be null');
        }
        $this->container['link_color_dark'] = $link_color_dark;

        return $this;
    }

    /**
     * Gets theme_code
     *
     * @return string|null
     */
    public function getThemeCode()
    {
        return $this->container['theme_code'];
    }

    /**
     * Sets theme_code
     *
     * @param string|null $theme_code The organization's brand settings - theme/mode.
     *
     * @return self
     */
    public function setThemeCode($theme_code)
    {
        if (is_null($theme_code)) {
            throw new \InvalidArgumentException('non-nullable theme_code cannot be null');
        }
        $allowedValues = $this->getThemeCodeAllowableValues();
        if (!in_array($theme_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'theme_code', must be one of '%s'",
                    $theme_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['theme_code'] = $theme_code;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string|null
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string|null $handle The organization's handle.
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets is_allow_registrations
     *
     * @return bool|null
     * @deprecated
     */
    public function getIsAllowRegistrations()
    {
        return $this->container['is_allow_registrations'];
    }

    /**
     * Sets is_allow_registrations
     *
     * @param bool|null $is_allow_registrations Deprecated - Use 'is_auto_membership_enabled' instead.
     *
     * @return self
     * @deprecated
     */
    public function setIsAllowRegistrations($is_allow_registrations)
    {
        if (is_null($is_allow_registrations)) {
            throw new \InvalidArgumentException('non-nullable is_allow_registrations cannot be null');
        }
        $this->container['is_allow_registrations'] = $is_allow_registrations;

        return $this;
    }

    /**
     * Gets is_auto_join_domain_list
     *
     * @return bool|null
     */
    public function getIsAutoJoinDomainList()
    {
        return $this->container['is_auto_join_domain_list'];
    }

    /**
     * Sets is_auto_join_domain_list
     *
     * @param bool|null $is_auto_join_domain_list Users can sign up to this organization.
     *
     * @return self
     */
    public function setIsAutoJoinDomainList($is_auto_join_domain_list)
    {
        if (is_null($is_auto_join_domain_list)) {
            throw new \InvalidArgumentException('non-nullable is_auto_join_domain_list cannot be null');
        }
        $this->container['is_auto_join_domain_list'] = $is_auto_join_domain_list;

        return $this;
    }

    /**
     * Gets allowed_domains
     *
     * @return string[]|null
     */
    public function getAllowedDomains()
    {
        return $this->container['allowed_domains'];
    }

    /**
     * Sets allowed_domains
     *
     * @param string[]|null $allowed_domains Domains allowed for self-sign up to this environment.
     *
     * @return self
     */
    public function setAllowedDomains($allowed_domains)
    {
        if (is_null($allowed_domains)) {
            throw new \InvalidArgumentException('non-nullable allowed_domains cannot be null');
        }
        $this->container['allowed_domains'] = $allowed_domains;

        return $this;
    }

    /**
     * Gets is_enable_advanced_orgs
     *
     * @return bool|null
     */
    public function getIsEnableAdvancedOrgs()
    {
        return $this->container['is_enable_advanced_orgs'];
    }

    /**
     * Sets is_enable_advanced_orgs
     *
     * @param bool|null $is_enable_advanced_orgs Activate advanced organization features.
     *
     * @return self
     */
    public function setIsEnableAdvancedOrgs($is_enable_advanced_orgs)
    {
        if (is_null($is_enable_advanced_orgs)) {
            throw new \InvalidArgumentException('non-nullable is_enable_advanced_orgs cannot be null');
        }
        $this->container['is_enable_advanced_orgs'] = $is_enable_advanced_orgs;

        return $this;
    }

    /**
     * Gets is_enforce_mfa
     *
     * @return bool|null
     */
    public function getIsEnforceMfa()
    {
        return $this->container['is_enforce_mfa'];
    }

    /**
     * Sets is_enforce_mfa
     *
     * @param bool|null $is_enforce_mfa Enforce MFA for all users in this organization.
     *
     * @return self
     */
    public function setIsEnforceMfa($is_enforce_mfa)
    {
        if (is_null($is_enforce_mfa)) {
            throw new \InvalidArgumentException('non-nullable is_enforce_mfa cannot be null');
        }
        $this->container['is_enforce_mfa'] = $is_enforce_mfa;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string|null
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string|null $sender_name The name of the organization that will be used in emails
     *
     * @return self
     */
    public function setSenderName($sender_name)
    {
        if (is_null($sender_name)) {
            array_push($this->openAPINullablesSetToNull, 'sender_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sender_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string|null
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string|null $sender_email The email address that will be used in emails. Requires custom SMTP to be set up.
     *
     * @return self
     */
    public function setSenderEmail($sender_email)
    {
        if (is_null($sender_email)) {
            array_push($this->openAPINullablesSetToNull, 'sender_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sender_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sender_email'] = $sender_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


