<?php
/**
 * ReplaceConnectionRequestOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReplaceConnectionRequestOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReplaceConnectionRequestOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReplaceConnection_request_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_id' => 'string',
        'client_secret' => 'string',
        'is_use_custom_domain' => 'bool',
        'home_realm_domains' => 'string[]',
        'entra_id_domain' => 'string',
        'is_use_common_endpoint' => 'bool',
        'is_sync_user_profile_on_login' => 'bool',
        'is_retrieve_provider_user_groups' => 'bool',
        'is_extended_attributes_required' => 'bool',
        'saml_entity_id' => 'string',
        'saml_acs_url' => 'string',
        'saml_idp_metadata_url' => 'string',
        'saml_email_key_attr' => 'string',
        'saml_first_name_key_attr' => 'string',
        'saml_last_name_key_attr' => 'string',
        'is_create_missing_user' => 'bool',
        'saml_signing_certificate' => 'string',
        'saml_signing_private_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_id' => null,
        'client_secret' => null,
        'is_use_custom_domain' => null,
        'home_realm_domains' => null,
        'entra_id_domain' => null,
        'is_use_common_endpoint' => null,
        'is_sync_user_profile_on_login' => null,
        'is_retrieve_provider_user_groups' => null,
        'is_extended_attributes_required' => null,
        'saml_entity_id' => null,
        'saml_acs_url' => null,
        'saml_idp_metadata_url' => null,
        'saml_email_key_attr' => null,
        'saml_first_name_key_attr' => null,
        'saml_last_name_key_attr' => null,
        'is_create_missing_user' => null,
        'saml_signing_certificate' => null,
        'saml_signing_private_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_id' => false,
        'client_secret' => false,
        'is_use_custom_domain' => false,
        'home_realm_domains' => false,
        'entra_id_domain' => false,
        'is_use_common_endpoint' => false,
        'is_sync_user_profile_on_login' => false,
        'is_retrieve_provider_user_groups' => false,
        'is_extended_attributes_required' => false,
        'saml_entity_id' => false,
        'saml_acs_url' => false,
        'saml_idp_metadata_url' => false,
        'saml_email_key_attr' => false,
        'saml_first_name_key_attr' => false,
        'saml_last_name_key_attr' => false,
        'is_create_missing_user' => false,
        'saml_signing_certificate' => false,
        'saml_signing_private_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'client_secret' => 'client_secret',
        'is_use_custom_domain' => 'is_use_custom_domain',
        'home_realm_domains' => 'home_realm_domains',
        'entra_id_domain' => 'entra_id_domain',
        'is_use_common_endpoint' => 'is_use_common_endpoint',
        'is_sync_user_profile_on_login' => 'is_sync_user_profile_on_login',
        'is_retrieve_provider_user_groups' => 'is_retrieve_provider_user_groups',
        'is_extended_attributes_required' => 'is_extended_attributes_required',
        'saml_entity_id' => 'saml_entity_id',
        'saml_acs_url' => 'saml_acs_url',
        'saml_idp_metadata_url' => 'saml_idp_metadata_url',
        'saml_email_key_attr' => 'saml_email_key_attr',
        'saml_first_name_key_attr' => 'saml_first_name_key_attr',
        'saml_last_name_key_attr' => 'saml_last_name_key_attr',
        'is_create_missing_user' => 'is_create_missing_user',
        'saml_signing_certificate' => 'saml_signing_certificate',
        'saml_signing_private_key' => 'saml_signing_private_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'is_use_custom_domain' => 'setIsUseCustomDomain',
        'home_realm_domains' => 'setHomeRealmDomains',
        'entra_id_domain' => 'setEntraIdDomain',
        'is_use_common_endpoint' => 'setIsUseCommonEndpoint',
        'is_sync_user_profile_on_login' => 'setIsSyncUserProfileOnLogin',
        'is_retrieve_provider_user_groups' => 'setIsRetrieveProviderUserGroups',
        'is_extended_attributes_required' => 'setIsExtendedAttributesRequired',
        'saml_entity_id' => 'setSamlEntityId',
        'saml_acs_url' => 'setSamlAcsUrl',
        'saml_idp_metadata_url' => 'setSamlIdpMetadataUrl',
        'saml_email_key_attr' => 'setSamlEmailKeyAttr',
        'saml_first_name_key_attr' => 'setSamlFirstNameKeyAttr',
        'saml_last_name_key_attr' => 'setSamlLastNameKeyAttr',
        'is_create_missing_user' => 'setIsCreateMissingUser',
        'saml_signing_certificate' => 'setSamlSigningCertificate',
        'saml_signing_private_key' => 'setSamlSigningPrivateKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'is_use_custom_domain' => 'getIsUseCustomDomain',
        'home_realm_domains' => 'getHomeRealmDomains',
        'entra_id_domain' => 'getEntraIdDomain',
        'is_use_common_endpoint' => 'getIsUseCommonEndpoint',
        'is_sync_user_profile_on_login' => 'getIsSyncUserProfileOnLogin',
        'is_retrieve_provider_user_groups' => 'getIsRetrieveProviderUserGroups',
        'is_extended_attributes_required' => 'getIsExtendedAttributesRequired',
        'saml_entity_id' => 'getSamlEntityId',
        'saml_acs_url' => 'getSamlAcsUrl',
        'saml_idp_metadata_url' => 'getSamlIdpMetadataUrl',
        'saml_email_key_attr' => 'getSamlEmailKeyAttr',
        'saml_first_name_key_attr' => 'getSamlFirstNameKeyAttr',
        'saml_last_name_key_attr' => 'getSamlLastNameKeyAttr',
        'is_create_missing_user' => 'getIsCreateMissingUser',
        'saml_signing_certificate' => 'getSamlSigningCertificate',
        'saml_signing_private_key' => 'getSamlSigningPrivateKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('client_secret', $data ?? [], null);
        $this->setIfExists('is_use_custom_domain', $data ?? [], null);
        $this->setIfExists('home_realm_domains', $data ?? [], null);
        $this->setIfExists('entra_id_domain', $data ?? [], null);
        $this->setIfExists('is_use_common_endpoint', $data ?? [], null);
        $this->setIfExists('is_sync_user_profile_on_login', $data ?? [], null);
        $this->setIfExists('is_retrieve_provider_user_groups', $data ?? [], null);
        $this->setIfExists('is_extended_attributes_required', $data ?? [], null);
        $this->setIfExists('saml_entity_id', $data ?? [], null);
        $this->setIfExists('saml_acs_url', $data ?? [], null);
        $this->setIfExists('saml_idp_metadata_url', $data ?? [], null);
        $this->setIfExists('saml_email_key_attr', $data ?? [], null);
        $this->setIfExists('saml_first_name_key_attr', $data ?? [], null);
        $this->setIfExists('saml_last_name_key_attr', $data ?? [], null);
        $this->setIfExists('is_create_missing_user', $data ?? [], null);
        $this->setIfExists('saml_signing_certificate', $data ?? [], null);
        $this->setIfExists('saml_signing_private_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client ID.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string|null $client_secret Client secret.
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        if (is_null($client_secret)) {
            throw new \InvalidArgumentException('non-nullable client_secret cannot be null');
        }
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets is_use_custom_domain
     *
     * @return bool|null
     */
    public function getIsUseCustomDomain()
    {
        return $this->container['is_use_custom_domain'];
    }

    /**
     * Sets is_use_custom_domain
     *
     * @param bool|null $is_use_custom_domain Use custom domain callback URL.
     *
     * @return self
     */
    public function setIsUseCustomDomain($is_use_custom_domain)
    {
        if (is_null($is_use_custom_domain)) {
            throw new \InvalidArgumentException('non-nullable is_use_custom_domain cannot be null');
        }
        $this->container['is_use_custom_domain'] = $is_use_custom_domain;

        return $this;
    }

    /**
     * Gets home_realm_domains
     *
     * @return string[]|null
     */
    public function getHomeRealmDomains()
    {
        return $this->container['home_realm_domains'];
    }

    /**
     * Sets home_realm_domains
     *
     * @param string[]|null $home_realm_domains List of domains to restrict authentication.
     *
     * @return self
     */
    public function setHomeRealmDomains($home_realm_domains)
    {
        if (is_null($home_realm_domains)) {
            throw new \InvalidArgumentException('non-nullable home_realm_domains cannot be null');
        }
        $this->container['home_realm_domains'] = $home_realm_domains;

        return $this;
    }

    /**
     * Gets entra_id_domain
     *
     * @return string|null
     */
    public function getEntraIdDomain()
    {
        return $this->container['entra_id_domain'];
    }

    /**
     * Sets entra_id_domain
     *
     * @param string|null $entra_id_domain Domain for Entra ID.
     *
     * @return self
     */
    public function setEntraIdDomain($entra_id_domain)
    {
        if (is_null($entra_id_domain)) {
            throw new \InvalidArgumentException('non-nullable entra_id_domain cannot be null');
        }
        $this->container['entra_id_domain'] = $entra_id_domain;

        return $this;
    }

    /**
     * Gets is_use_common_endpoint
     *
     * @return bool|null
     */
    public function getIsUseCommonEndpoint()
    {
        return $this->container['is_use_common_endpoint'];
    }

    /**
     * Sets is_use_common_endpoint
     *
     * @param bool|null $is_use_common_endpoint Use https://login.windows.net/common instead of a default endpoint.
     *
     * @return self
     */
    public function setIsUseCommonEndpoint($is_use_common_endpoint)
    {
        if (is_null($is_use_common_endpoint)) {
            throw new \InvalidArgumentException('non-nullable is_use_common_endpoint cannot be null');
        }
        $this->container['is_use_common_endpoint'] = $is_use_common_endpoint;

        return $this;
    }

    /**
     * Gets is_sync_user_profile_on_login
     *
     * @return bool|null
     */
    public function getIsSyncUserProfileOnLogin()
    {
        return $this->container['is_sync_user_profile_on_login'];
    }

    /**
     * Sets is_sync_user_profile_on_login
     *
     * @param bool|null $is_sync_user_profile_on_login Sync user profile data with IDP.
     *
     * @return self
     */
    public function setIsSyncUserProfileOnLogin($is_sync_user_profile_on_login)
    {
        if (is_null($is_sync_user_profile_on_login)) {
            throw new \InvalidArgumentException('non-nullable is_sync_user_profile_on_login cannot be null');
        }
        $this->container['is_sync_user_profile_on_login'] = $is_sync_user_profile_on_login;

        return $this;
    }

    /**
     * Gets is_retrieve_provider_user_groups
     *
     * @return bool|null
     */
    public function getIsRetrieveProviderUserGroups()
    {
        return $this->container['is_retrieve_provider_user_groups'];
    }

    /**
     * Sets is_retrieve_provider_user_groups
     *
     * @param bool|null $is_retrieve_provider_user_groups Include user group info from MS Entra ID.
     *
     * @return self
     */
    public function setIsRetrieveProviderUserGroups($is_retrieve_provider_user_groups)
    {
        if (is_null($is_retrieve_provider_user_groups)) {
            throw new \InvalidArgumentException('non-nullable is_retrieve_provider_user_groups cannot be null');
        }
        $this->container['is_retrieve_provider_user_groups'] = $is_retrieve_provider_user_groups;

        return $this;
    }

    /**
     * Gets is_extended_attributes_required
     *
     * @return bool|null
     */
    public function getIsExtendedAttributesRequired()
    {
        return $this->container['is_extended_attributes_required'];
    }

    /**
     * Sets is_extended_attributes_required
     *
     * @param bool|null $is_extended_attributes_required Include additional user profile information.
     *
     * @return self
     */
    public function setIsExtendedAttributesRequired($is_extended_attributes_required)
    {
        if (is_null($is_extended_attributes_required)) {
            throw new \InvalidArgumentException('non-nullable is_extended_attributes_required cannot be null');
        }
        $this->container['is_extended_attributes_required'] = $is_extended_attributes_required;

        return $this;
    }

    /**
     * Gets saml_entity_id
     *
     * @return string|null
     */
    public function getSamlEntityId()
    {
        return $this->container['saml_entity_id'];
    }

    /**
     * Sets saml_entity_id
     *
     * @param string|null $saml_entity_id SAML Entity ID.
     *
     * @return self
     */
    public function setSamlEntityId($saml_entity_id)
    {
        if (is_null($saml_entity_id)) {
            throw new \InvalidArgumentException('non-nullable saml_entity_id cannot be null');
        }
        $this->container['saml_entity_id'] = $saml_entity_id;

        return $this;
    }

    /**
     * Gets saml_acs_url
     *
     * @return string|null
     */
    public function getSamlAcsUrl()
    {
        return $this->container['saml_acs_url'];
    }

    /**
     * Sets saml_acs_url
     *
     * @param string|null $saml_acs_url Assertion Consumer Service URL.
     *
     * @return self
     */
    public function setSamlAcsUrl($saml_acs_url)
    {
        if (is_null($saml_acs_url)) {
            throw new \InvalidArgumentException('non-nullable saml_acs_url cannot be null');
        }
        $this->container['saml_acs_url'] = $saml_acs_url;

        return $this;
    }

    /**
     * Gets saml_idp_metadata_url
     *
     * @return string|null
     */
    public function getSamlIdpMetadataUrl()
    {
        return $this->container['saml_idp_metadata_url'];
    }

    /**
     * Sets saml_idp_metadata_url
     *
     * @param string|null $saml_idp_metadata_url URL for the IdP metadata.
     *
     * @return self
     */
    public function setSamlIdpMetadataUrl($saml_idp_metadata_url)
    {
        if (is_null($saml_idp_metadata_url)) {
            throw new \InvalidArgumentException('non-nullable saml_idp_metadata_url cannot be null');
        }
        $this->container['saml_idp_metadata_url'] = $saml_idp_metadata_url;

        return $this;
    }

    /**
     * Gets saml_email_key_attr
     *
     * @return string|null
     */
    public function getSamlEmailKeyAttr()
    {
        return $this->container['saml_email_key_attr'];
    }

    /**
     * Sets saml_email_key_attr
     *
     * @param string|null $saml_email_key_attr Attribute key for the user’s email.
     *
     * @return self
     */
    public function setSamlEmailKeyAttr($saml_email_key_attr)
    {
        if (is_null($saml_email_key_attr)) {
            throw new \InvalidArgumentException('non-nullable saml_email_key_attr cannot be null');
        }
        $this->container['saml_email_key_attr'] = $saml_email_key_attr;

        return $this;
    }

    /**
     * Gets saml_first_name_key_attr
     *
     * @return string|null
     */
    public function getSamlFirstNameKeyAttr()
    {
        return $this->container['saml_first_name_key_attr'];
    }

    /**
     * Sets saml_first_name_key_attr
     *
     * @param string|null $saml_first_name_key_attr Attribute key for the user’s first name.
     *
     * @return self
     */
    public function setSamlFirstNameKeyAttr($saml_first_name_key_attr)
    {
        if (is_null($saml_first_name_key_attr)) {
            throw new \InvalidArgumentException('non-nullable saml_first_name_key_attr cannot be null');
        }
        $this->container['saml_first_name_key_attr'] = $saml_first_name_key_attr;

        return $this;
    }

    /**
     * Gets saml_last_name_key_attr
     *
     * @return string|null
     */
    public function getSamlLastNameKeyAttr()
    {
        return $this->container['saml_last_name_key_attr'];
    }

    /**
     * Sets saml_last_name_key_attr
     *
     * @param string|null $saml_last_name_key_attr Attribute key for the user’s last name.
     *
     * @return self
     */
    public function setSamlLastNameKeyAttr($saml_last_name_key_attr)
    {
        if (is_null($saml_last_name_key_attr)) {
            throw new \InvalidArgumentException('non-nullable saml_last_name_key_attr cannot be null');
        }
        $this->container['saml_last_name_key_attr'] = $saml_last_name_key_attr;

        return $this;
    }

    /**
     * Gets is_create_missing_user
     *
     * @return bool|null
     */
    public function getIsCreateMissingUser()
    {
        return $this->container['is_create_missing_user'];
    }

    /**
     * Sets is_create_missing_user
     *
     * @param bool|null $is_create_missing_user Create user if they don’t exist.
     *
     * @return self
     */
    public function setIsCreateMissingUser($is_create_missing_user)
    {
        if (is_null($is_create_missing_user)) {
            throw new \InvalidArgumentException('non-nullable is_create_missing_user cannot be null');
        }
        $this->container['is_create_missing_user'] = $is_create_missing_user;

        return $this;
    }

    /**
     * Gets saml_signing_certificate
     *
     * @return string|null
     */
    public function getSamlSigningCertificate()
    {
        return $this->container['saml_signing_certificate'];
    }

    /**
     * Sets saml_signing_certificate
     *
     * @param string|null $saml_signing_certificate Certificate for signing SAML requests.
     *
     * @return self
     */
    public function setSamlSigningCertificate($saml_signing_certificate)
    {
        if (is_null($saml_signing_certificate)) {
            throw new \InvalidArgumentException('non-nullable saml_signing_certificate cannot be null');
        }
        $this->container['saml_signing_certificate'] = $saml_signing_certificate;

        return $this;
    }

    /**
     * Gets saml_signing_private_key
     *
     * @return string|null
     */
    public function getSamlSigningPrivateKey()
    {
        return $this->container['saml_signing_private_key'];
    }

    /**
     * Sets saml_signing_private_key
     *
     * @param string|null $saml_signing_private_key Private key associated with the signing certificate.
     *
     * @return self
     */
    public function setSamlSigningPrivateKey($saml_signing_private_key)
    {
        if (is_null($saml_signing_private_key)) {
            throw new \InvalidArgumentException('non-nullable saml_signing_private_key cannot be null');
        }
        $this->container['saml_signing_private_key'] = $saml_signing_private_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


